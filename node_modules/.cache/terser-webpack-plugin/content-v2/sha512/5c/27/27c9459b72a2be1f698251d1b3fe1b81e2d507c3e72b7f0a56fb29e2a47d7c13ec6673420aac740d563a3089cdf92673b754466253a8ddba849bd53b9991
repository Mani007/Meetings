{"map":"{\"version\":3,\"sources\":[\"webpack/universalModuleDefinition\",\"webpack/bootstrap\",\"/home/akshayk/jitsi/Meetings/modules/API/external/functions.js\",\"/home/akshayk/jitsi/Meetings/node_modules/jitsi-meet-logger/lib/Logger.js\",\"/home/akshayk/jitsi/Meetings/node_modules/events/events.js\",\"/home/akshayk/jitsi/Meetings/node_modules/postis/src/index.js\",\"/home/akshayk/jitsi/Meetings/node_modules/jitsi-meet-logger/lib/index.js\",\"/home/akshayk/jitsi/Meetings/modules/API/external/index.js\",\"/home/akshayk/jitsi/Meetings/node_modules/jitsi-meet-logger/lib/LogCollector.js\",\"/home/akshayk/jitsi/Meetings/react/features/base/util/uri.js\",\"/home/akshayk/jitsi/Meetings/modules/API/constants.js\",\"/home/akshayk/jitsi/Meetings/react/features/base/config/parseURLParams.js\",\"/home/akshayk/jitsi/Meetings/react/features/base/util/helpers.js\",\"/home/akshayk/jitsi/Meetings/modules/transport/PostMessageTransportBackend.js\",\"/home/akshayk/jitsi/Meetings/modules/transport/constants.js\",\"/home/akshayk/jitsi/Meetings/modules/transport/Transport.js\",\"/home/akshayk/jitsi/Meetings/modules/transport/index.js\",\"/home/akshayk/jitsi/Meetings/modules/API/external/external_api.js\"],\"names\":[\"root\",\"factory\",\"exports\",\"module\",\"define\",\"amd\",\"window\",\"installedModules\",\"__webpack_require__\",\"moduleId\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"__filename\",\"__webpack_exports__\",\"getAvailableDevices\",\"getCurrentDevices\",\"isDeviceChangeAvailable\",\"isDeviceListAvailable\",\"isMultipleAudioInputSupported\",\"setAudioInputDevice\",\"setAudioOutputDevice\",\"setVideoInputDevice\",\"jitsi_meet_logger__WEBPACK_IMPORTED_MODULE_0__\",\"logger\",\"Logger\",\"getLogger\",\"transport\",\"sendRequest\",\"type\",\"catch\",\"e\",\"error\",\"deviceType\",\"label\",\"id\",\"_setDevice\",\"kind\",\"device\",\"levels\",\"trace\",\"debug\",\"info\",\"log\",\"warn\",\"consoleTransport\",\"console\",\"globalTransports\",\"addGlobalTransport\",\"indexOf\",\"push\",\"removeGlobalTransport\",\"transportIdx\",\"splice\",\"globalOptions\",\"arguments\",\"level\",\"args\",\"Array\",\"slice\",\"callerInfo\",\"options\",\"disableCallerInfo\",\"methodName\",\"fileLocation\",\"line\",\"column\",\"Error\",\"stack\",\"split\",\"length\",\"match\",\"substr\",\"getCallerInfo\",\"transports\",\"concat\",\"logPrefixes\",\"fullLogParts\",\"apply\",\"this\",\"methods\",\"keys\",\"setGlobalOptions\",\"setLevel\",\"TRACE\",\"DEBUG\",\"INFO\",\"LOG\",\"WARN\",\"ERROR\",\"EventEmitter\",\"_events\",\"_maxListeners\",\"undefined\",\"isFunction\",\"arg\",\"isObject\",\"isUndefined\",\"defaultMaxListeners\",\"setMaxListeners\",\"isNaN\",\"TypeError\",\"emit\",\"er\",\"handler\",\"len\",\"listeners\",\"err\",\"context\",\"addListener\",\"listener\",\"newListener\",\"warned\",\"on\",\"once\",\"fired\",\"g\",\"removeListener\",\"list\",\"position\",\"removeAllListeners\",\"listenerCount\",\"evlistener\",\"emitter\",\"readynessCheck\",\"scope\",\"targetWindow\",\"windowForEventListening\",\"sendBuffer\",\"listenBuffer\",\"ready\",\"event\",\"data\",\"JSON\",\"parse\",\"postis\",\"listenersForMethod\",\"method\",\"params\",\"addEventListener\",\"listen\",\"callback\",\"listenBufferForMethod\",\"j\",\"send\",\"opts\",\"postMessage\",\"stringify\",\"setTimeout\",\"destroy\",\"clearInterval\",\"removeEventListener\",\"readyCheckID\",\"Date\",\"Math\",\"random\",\"setInterval\",\"LogCollector\",\"idLoggers\",\"loggers\",\"curLevel\",\"setLogLevelById\",\"setLogLevel\",\"require\",\"default\",\"logStorage\",\"stringifyObjects\",\"storeInterval\",\"maxEntryLength\",\"forEach\",\"logLevel\",\"_log\",\"storeLogsIntervalID\",\"queue\",\"totalLen\",\"outputCache\",\"someObject\",\"formatLogMessage\",\"msg\",\"prevMessage\",\"text\",\"count\",\"_flush\",\"start\",\"_reschedulePublishInterval\",\"clearTimeout\",\"flush\",\"force\",\"reschedule\",\"isReady\",\"cachedQueue\",\"storeLogs\",\"stop\",\"APP_LINK_SCHEME\",\"_URI_AUTHORITY_PATTERN\",\"_URI_PATH_PATTERN\",\"URI_PROTOCOL_PATTERN\",\"_fixURIStringScheme\",\"uri\",\"regex\",\"RegExp\",\"exec\",\"protocol\",\"toLowerCase\",\"substring\",\"lastIndex\",\"startsWith\",\"_objectToURLParamsArray\",\"obj\",\"encodeURIComponent\",\"parseStandardURIString\",\"str\",\"toString\",\"_standardURIToString\",\"pathname\",\"replace\",\"authority\",\"userinfoEndIndex\",\"host\",\"portBeginIndex\",\"lastIndexOf\",\"port\",\"hostname\",\"hashBeginIndex\",\"search\",\"hash\",\"thiz\",\"urlObjectToString\",\"tmp\",\"url\",\"serverURL\",\"room\",\"URL\",\"scheme\",\"endsWith\",\"domain\",\"contextRoot\",\"roomName\",\"jwt\",\"urlPrefix\",\"urlParamsArray\",\"urlParamsString\",\"join\",\"API_ID\",\"dontParse\",\"source\",\"paramStr\",\"paramParts\",\"firstParam\",\"part\",\"param\",\"decoded\",\"decodeURIComponent\",\"onerror\",\"reportError\",\"String\",\"parseURLParams\",\"location\",\"jitsi_meet_external_api_id\",\"DEFAULT_POSTIS_OPTIONS\",\"opener\",\"parent\",\"LEGACY_INCOMING_METHODS\",\"LEGACY_OUTGOING_METHODS\",\"POSTIS_METHOD_NAME\",\"PostMessageTransportBackend\",\"constructor\",\"enableLegacyFormat\",\"postisOptions\",\"Postis\",\"_objectSpread\",\"_enableLegacyFormat\",\"_legacyMessageReceivedCallback\",\"_receiveCallback\",\"message\",\"_sendLegacyMessage\",\"_ref\",\"_objectWithoutProperties\",\"dispose\",\"setReceiveCallback\",\"MESSAGE_TYPE_EVENT\",\"MESSAGE_TYPE_REQUEST\",\"MESSAGE_TYPE_RESPONSE\",\"Transport\",\"backend\",\"_listeners\",\"Map\",\"_requestID\",\"_responseHandlers\",\"_unprocessedMessages\",\"Set\",\"setBackend\",\"_disposeBackend\",\"_backend\",\"_onMessageReceived\",\"delete\",\"result\",\"clear\",\"eventName\",\"listenersForEvent\",\"isProcessed\",\"size\",\"add\",\"set\",\"sendEvent\",\"request\",\"Promise\",\"reject\",\"resolve\",\"JitsiMeetJS\",\"app\",\"setExternalTransportBackend\",\"externalTransportBackend\",\"ALWAYS_ON_TOP_FILENAMES\",\"commands\",\"avatarUrl\",\"displayName\",\"email\",\"hangup\",\"password\",\"sendTones\",\"subject\",\"submitFeedback\",\"toggleAudio\",\"toggleChat\",\"toggleFilmStrip\",\"toggleShareScreen\",\"toggleTileView\",\"toggleVideo\",\"events\",\"avatar-changed\",\"audio-availability-changed\",\"audio-mute-status-changed\",\"camera-error\",\"device-list-changed\",\"display-name-change\",\"email-change\",\"feedback-submitted\",\"feedback-prompt-displayed\",\"filmstrip-display-changed\",\"incoming-message\",\"mic-error\",\"outgoing-message\",\"participant-joined\",\"participant-kicked-out\",\"participant-left\",\"password-required\",\"proxy-connection-event\",\"video-ready-to-close\",\"video-conference-joined\",\"video-conference-left\",\"video-availability-changed\",\"video-mute-status-changed\",\"screen-sharing-status-changed\",\"dominant-speaker-changed\",\"subject-change\",\"suspend-detected\",\"tile-view-changed\",\"changeParticipantNumber\",\"APIInstance\",\"number\",\"_numberOfParticipants\",\"generateURL\",\"external_api_objectSpread\",\"noSSL\",\"parseSizeParam\",\"parsedValue\",\"JitsiMeetExternalAPI\",\"super\",\"width\",\"height\",\"parentNode\",\"document\",\"body\",\"configOverwrite\",\"interfaceConfigOverwrite\",\"onload\",\"invitees\",\"devices\",\"parseArguments\",\"_parentNode\",\"_url\",\"_createIFrame\",\"_transport\",\"_frame\",\"contentWindow\",\"isArray\",\"invite\",\"_isLargeVideoVisible\",\"_participants\",\"_myUserID\",\"_onStageParticipant\",\"_setupListeners\",\"frameName\",\"createElement\",\"allow\",\"src\",\"_setSize\",\"setAttribute\",\"style\",\"border\",\"appendChild\",\"_getAlwaysOnTopResources\",\"iframeWindow\",\"iframeDocument\",\"baseURL\",\"base\",\"querySelector\",\"href\",\"map\",\"filename\",\"_getOnStageParticipant\",\"_getLargeVideo\",\"iframe\",\"getIFrame\",\"getElementById\",\"_getParticipantVideo\",\"participantId\",\"parsedHeight\",\"parsedWidth\",\"external_api_objectWithoutProperties\",\"userID\",\"avatarURL\",\"formattedDisplayName\",\"user\",\"displayname\",\"isVisible\",\"addEventListeners\",\"removeChild\",\"executeCommand\",\"executeCommands\",\"commandList\",\"isAudioAvailable\",\"isAudioMuted\",\"getAvatarURL\",\"getDisplayName\",\"getEmail\",\"_getFormattedDisplayName\",\"getNumberOfParticipants\",\"isVideoAvailable\",\"isVideoMuted\",\"removeEventListeners\",\"eventList\",\"sendProxyConnectionEvent\",\"deviceId\",\"_getElectronPopupsConfig\",\"electronPopupsConfig\"],\"mappings\":\"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\",\"sourcesContent\":[\"(function webpackUniversalModuleDefinition(root, factory) {\\n\\tif(typeof exports === 'object' && typeof module === 'object')\\n\\t\\tmodule.exports = factory();\\n\\telse if(typeof define === 'function' && define.amd)\\n\\t\\tdefine([], factory);\\n\\telse if(typeof exports === 'object')\\n\\t\\texports[\\\"JitsiMeetExternalAPI\\\"] = factory();\\n\\telse\\n\\t\\troot[\\\"JitsiMeetExternalAPI\\\"] = factory();\\n})(window, function() {\\nreturn \",\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n \\t\\t}\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// create a fake namespace object\\n \\t// mode & 1: value is a module id, require it\\n \\t// mode & 2: merge all properties of value into the ns\\n \\t// mode & 4: return value when already ns object\\n \\t// mode & 8|1: behave like require\\n \\t__webpack_require__.t = function(value, mode) {\\n \\t\\tif(mode & 1) value = __webpack_require__(value);\\n \\t\\tif(mode & 8) return value;\\n \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n \\t\\tvar ns = Object.create(null);\\n \\t\\t__webpack_require__.r(ns);\\n \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n \\t\\treturn ns;\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"/libs/\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 6);\\n\",\"// @flow\\n\\nimport Logger from 'jitsi-meet-logger';\\n\\nconst logger = Logger.getLogger(__filename);\\n\\n/**\\n * Returns Promise that resolves with result an list of available devices.\\n *\\n * @param {Transport} transport - The @code{Transport} instance responsible for\\n * the external communication.\\n * @returns {Promise}\\n */\\nexport function getAvailableDevices(transport: Object) {\\n    return transport.sendRequest({\\n        type: 'devices',\\n        name: 'getAvailableDevices'\\n    }).catch(e => {\\n        logger.error(e);\\n\\n        return {};\\n    });\\n}\\n\\n/**\\n * Returns Promise that resolves with current selected devices.\\n *\\n * @param {Transport} transport - The @code{Transport} instance responsible for\\n * the external communication.\\n * @returns {Promise}\\n */\\nexport function getCurrentDevices(transport: Object) {\\n    return transport.sendRequest({\\n        type: 'devices',\\n        name: 'getCurrentDevices'\\n    }).catch(e => {\\n        logger.error(e);\\n\\n        return {};\\n    });\\n}\\n\\n/**\\n * Returns Promise that resolves with true if the device change is available\\n * and with false if not.\\n *\\n * @param {Transport} transport - The @code{Transport} instance responsible for\\n * the external communication.\\n * @param {string} [deviceType] - Values - 'output', 'input' or undefined.\\n * Default - 'input'.\\n * @returns {Promise}\\n */\\nexport function isDeviceChangeAvailable(transport: Object, deviceType: string) {\\n    return transport.sendRequest({\\n        deviceType,\\n        type: 'devices',\\n        name: 'isDeviceChangeAvailable'\\n    });\\n}\\n\\n/**\\n * Returns Promise that resolves with true if the device list is available\\n * and with false if not.\\n *\\n * @param {Transport} transport - The @code{Transport} instance responsible for\\n * the external communication.\\n * @returns {Promise}\\n */\\nexport function isDeviceListAvailable(transport: Object) {\\n    return transport.sendRequest({\\n        type: 'devices',\\n        name: 'isDeviceListAvailable'\\n    });\\n}\\n\\n/**\\n * Returns Promise that resolves with true if multiple audio input is supported\\n * and with false if not.\\n *\\n * @param {Transport} transport - The @code{Transport} instance responsible for\\n * the external communication.\\n * @returns {Promise}\\n */\\nexport function isMultipleAudioInputSupported(transport: Object) {\\n    return transport.sendRequest({\\n        type: 'devices',\\n        name: 'isMultipleAudioInputSupported'\\n    });\\n}\\n\\n/**\\n * Sets the audio input device to the one with the label or id that is passed.\\n *\\n * @param {Transport} transport - The @code{Transport} instance responsible for\\n * the external communication.\\n * @param {string} label - The label of the new device.\\n * @param {string} id - The id of the new device.\\n * @returns {Promise}\\n */\\nexport function setAudioInputDevice(transport: Object, label: string, id: string) {\\n    return _setDevice(transport, {\\n        id,\\n        kind: 'audioinput',\\n        label\\n    });\\n}\\n\\n/**\\n * Sets the audio output device to the one with the label or id that is passed.\\n *\\n * @param {Transport} transport - The @code{Transport} instance responsible for\\n * the external communication.\\n * @param {string} label - The label of the new device.\\n * @param {string} id - The id of the new device.\\n * @returns {Promise}\\n */\\nexport function setAudioOutputDevice(transport: Object, label: string, id: string) {\\n    return _setDevice(transport, {\\n        id,\\n        kind: 'audiooutput',\\n        label\\n    });\\n}\\n\\n/**\\n * Sets the currently used device to the one that is passed.\\n *\\n * @param {Transport} transport - The @code{Transport} instance responsible for\\n * the external communication.\\n * @param {Object} device - The new device to be used.\\n * @returns {Promise}\\n */\\nfunction _setDevice(transport: Object, device) {\\n    return transport.sendRequest({\\n        type: 'devices',\\n        name: 'setDevice',\\n        device\\n    });\\n}\\n\\n/**\\n * Sets the video input device to the one with the label or id that is passed.\\n *\\n * @param {Transport} transport - The @code{Transport} instance responsible for\\n * the external communication.\\n * @param {string} label - The label of the new device.\\n * @param {string} id - The id of the new device.\\n * @returns {Promise}\\n */\\nexport function setVideoInputDevice(transport: Object, label: string, id: string) {\\n    return _setDevice(transport, {\\n        id,\\n        kind: 'videoinput',\\n        label\\n    });\\n}\\n\",\"/* Copyright @ 2015-present 8x8, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\n/**\\n * Ordered log levels.\\n */\\nvar levels = {\\n    \\\"trace\\\": 0,\\n    \\\"debug\\\": 1,\\n    \\\"info\\\": 2,\\n    \\\"log\\\": 3,\\n    \\\"warn\\\": 4,\\n    \\\"error\\\": 5\\n};\\n\\n/**\\n * The default transport - console\\n * @type LoggerTransport\\n */\\nLogger.consoleTransport = console;\\n\\n/**\\n * The array which stores currently registered global transports.\\n * @type {[LoggerTransport]}\\n */\\nvar globalTransports = [ Logger.consoleTransport ];\\n\\n/**\\n * Adds given {@link LoggerTransport} instance to the list of global\\n * transports which means that it'll be used by all {@link Logger}s\\n * @param {LoggerTransport} transport\\n */\\nLogger.addGlobalTransport = function(transport) {\\n    if (globalTransports.indexOf(transport) === -1) {\\n        globalTransports.push(transport);\\n    }\\n};\\n\\n/**\\n * Removes given {@link LoggerTransport} instance from the list of global\\n * transports\\n * @param {LoggerTransport} transport\\n */\\nLogger.removeGlobalTransport = function(transport) {\\n    var transportIdx = globalTransports.indexOf(transport);\\n    if (transportIdx !== -1) {\\n        globalTransports.splice(transportIdx, 1);\\n    }\\n};\\n\\n/**\\n * The global configuration options.\\n */\\nvar globalOptions = {};\\n\\n/**\\n * Sets global options which will be used by all loggers. Changing these works\\n * even after other loggers are created.\\n */\\nLogger.setGlobalOptions = function(options) {\\n    globalOptions = options || {};\\n}\\n\\n/**\\n * Parses Error's object stack trace and extracts information about the last\\n * caller before the log method was called.\\n * @returns JS object with info about the caller - method name, file location,\\n * line and column.\\n */\\nfunction getCallerInfo() {\\n    var callerInfo = {\\n        methodName: \\\"\\\",\\n        fileLocation: \\\"\\\",\\n        line: null,\\n        column: null\\n    };\\n    //gets the part of the stack without the logger wrappers\\n    var error = new Error();\\n    var stack = error.stack? error.stack.split(\\\"\\\\n\\\") : [];\\n    if(!stack || stack.length < 1) {\\n        return callerInfo;\\n    }\\n    var m = null;\\n    if(stack[3]) {\\n        m = stack[3].match(/\\\\s*at\\\\s*(.+?)\\\\s*\\\\((\\\\S*)\\\\s*:(\\\\d*)\\\\s*:(\\\\d*)\\\\)/);\\n    }\\n    if(!m || m.length <= 4) {\\n        //Firefox && Safari\\n        if(stack[2].indexOf(\\\"log@\\\") === 0){\\n            //Safari\\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\\\"@\\\"));\\n        } else {\\n            //Firefox\\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\\\"@\\\"));\\n        }\\n        return callerInfo;\\n    }\\n\\n    callerInfo.methodName = m[1];\\n    callerInfo.fileLocation = m[2];\\n    callerInfo.line = m[3];\\n    callerInfo.column = m[4];\\n    return callerInfo;\\n}\\n\\n/**\\n * Logs messages using the transports and level from the logger.\\n * @param logger a logger instance.\\n * @param level the log level of the message. See the levels variable.\\n * @param arguments array with arguments that will be logged.\\n */\\nfunction log() {\\n    var logger = arguments[0], level = arguments[1],\\n        args = Array.prototype.slice.call(arguments, 2);\\n    if(levels[level] < logger.level) {\\n        return;\\n    }\\n\\n    var callerInfo\\n        = !(logger.options.disableCallerInfo\\n            || globalOptions.disableCallerInfo) && getCallerInfo();\\n    var transports = globalTransports.concat(logger.transports);\\n    for(var i = 0; i < transports.length; i++) {\\n        var t = transports[i];\\n        var l = t[level];\\n        if(l && typeof(l) === \\\"function\\\") {\\n            var logPrefixes = [];\\n\\n            if (logger.id) {\\n                logPrefixes.push(\\\"[\\\" + logger.id + \\\"]\\\");\\n            }\\n\\n            if (callerInfo && callerInfo.methodName.length > 1) {\\n                logPrefixes.push(\\\"<\\\" + callerInfo.methodName + \\\">: \\\");\\n            }\\n\\n            var fullLogParts = logPrefixes.concat(args);\\n\\n            l.bind(t).apply(t, fullLogParts);\\n        }\\n    }\\n}\\n\\n/**\\n *\\n * Constructs new logger object.\\n * @param level the logging level for the new logger\\n * @param id optional identifier for the logger instance.\\n * @param {LoggerTransport} transports optional list of handlers(objects) for\\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\\n * @param options optional configuration file for how the logger should behave.\\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\\n * method invocation should be included in the log. Defaults to false, so the\\n * call site will be included.\\n */\\nfunction Logger(level, id, transports, options) {\\n    this.id = id;\\n    this.options = options || {};\\n    this.transports = transports;\\n    if(!this.transports) {\\n        this.transports = [];\\n    }\\n    this.level = levels[level];\\n    var methods = Object.keys(levels);\\n    for(var i = 0; i < methods.length; i++){\\n        this[methods[i]] =\\n            log.bind(null, this, methods[i]);\\n    }\\n}\\n\\n/**\\n * Sets the log level for the logger.\\n * @param level the new log level.\\n */\\nLogger.prototype.setLevel = function (level) {\\n    this.level = levels[level];\\n};\\nmodule.exports = Logger;\\n\\n/**\\n * Enum for the supported log levels.\\n */\\nLogger.levels = {\\n    TRACE: \\\"trace\\\",\\n    DEBUG: \\\"debug\\\",\\n    INFO: \\\"info\\\",\\n    LOG: \\\"log\\\",\\n    WARN: \\\"warn\\\",\\n    ERROR: \\\"error\\\"\\n};\\n\",\"// Copyright Joyent, Inc. and other Node contributors.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a\\n// copy of this software and associated documentation files (the\\n// \\\"Software\\\"), to deal in the Software without restriction, including\\n// without limitation the rights to use, copy, modify, merge, publish,\\n// distribute, sublicense, and/or sell copies of the Software, and to permit\\n// persons to whom the Software is furnished to do so, subject to the\\n// following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included\\n// in all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\nfunction EventEmitter() {\\n  this._events = this._events || {};\\n  this._maxListeners = this._maxListeners || undefined;\\n}\\nmodule.exports = EventEmitter;\\n\\n// Backwards-compat with node 0.10.x\\nEventEmitter.EventEmitter = EventEmitter;\\n\\nEventEmitter.prototype._events = undefined;\\nEventEmitter.prototype._maxListeners = undefined;\\n\\n// By default EventEmitters will print a warning if more than 10 listeners are\\n// added to it. This is a useful default which helps finding memory leaks.\\nEventEmitter.defaultMaxListeners = 10;\\n\\n// Obviously not all Emitters should be limited to 10. This function allows\\n// that to be increased. Set to zero for unlimited.\\nEventEmitter.prototype.setMaxListeners = function(n) {\\n  if (!isNumber(n) || n < 0 || isNaN(n))\\n    throw TypeError('n must be a positive number');\\n  this._maxListeners = n;\\n  return this;\\n};\\n\\nEventEmitter.prototype.emit = function(type) {\\n  var er, handler, len, args, i, listeners;\\n\\n  if (!this._events)\\n    this._events = {};\\n\\n  // If there is no 'error' event listener then throw.\\n  if (type === 'error') {\\n    if (!this._events.error ||\\n        (isObject(this._events.error) && !this._events.error.length)) {\\n      er = arguments[1];\\n      if (er instanceof Error) {\\n        throw er; // Unhandled 'error' event\\n      } else {\\n        // At least give some kind of context to the user\\n        var err = new Error('Uncaught, unspecified \\\"error\\\" event. (' + er + ')');\\n        err.context = er;\\n        throw err;\\n      }\\n    }\\n  }\\n\\n  handler = this._events[type];\\n\\n  if (isUndefined(handler))\\n    return false;\\n\\n  if (isFunction(handler)) {\\n    switch (arguments.length) {\\n      // fast cases\\n      case 1:\\n        handler.call(this);\\n        break;\\n      case 2:\\n        handler.call(this, arguments[1]);\\n        break;\\n      case 3:\\n        handler.call(this, arguments[1], arguments[2]);\\n        break;\\n      // slower\\n      default:\\n        args = Array.prototype.slice.call(arguments, 1);\\n        handler.apply(this, args);\\n    }\\n  } else if (isObject(handler)) {\\n    args = Array.prototype.slice.call(arguments, 1);\\n    listeners = handler.slice();\\n    len = listeners.length;\\n    for (i = 0; i < len; i++)\\n      listeners[i].apply(this, args);\\n  }\\n\\n  return true;\\n};\\n\\nEventEmitter.prototype.addListener = function(type, listener) {\\n  var m;\\n\\n  if (!isFunction(listener))\\n    throw TypeError('listener must be a function');\\n\\n  if (!this._events)\\n    this._events = {};\\n\\n  // To avoid recursion in the case that type === \\\"newListener\\\"! Before\\n  // adding it to the listeners, first emit \\\"newListener\\\".\\n  if (this._events.newListener)\\n    this.emit('newListener', type,\\n              isFunction(listener.listener) ?\\n              listener.listener : listener);\\n\\n  if (!this._events[type])\\n    // Optimize the case of one listener. Don't need the extra array object.\\n    this._events[type] = listener;\\n  else if (isObject(this._events[type]))\\n    // If we've already got an array, just append.\\n    this._events[type].push(listener);\\n  else\\n    // Adding the second element, need to change to array.\\n    this._events[type] = [this._events[type], listener];\\n\\n  // Check for listener leak\\n  if (isObject(this._events[type]) && !this._events[type].warned) {\\n    if (!isUndefined(this._maxListeners)) {\\n      m = this._maxListeners;\\n    } else {\\n      m = EventEmitter.defaultMaxListeners;\\n    }\\n\\n    if (m && m > 0 && this._events[type].length > m) {\\n      this._events[type].warned = true;\\n      console.error('(node) warning: possible EventEmitter memory ' +\\n                    'leak detected. %d listeners added. ' +\\n                    'Use emitter.setMaxListeners() to increase limit.',\\n                    this._events[type].length);\\n      if (typeof console.trace === 'function') {\\n        // not supported in IE 10\\n        console.trace();\\n      }\\n    }\\n  }\\n\\n  return this;\\n};\\n\\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\\n\\nEventEmitter.prototype.once = function(type, listener) {\\n  if (!isFunction(listener))\\n    throw TypeError('listener must be a function');\\n\\n  var fired = false;\\n\\n  function g() {\\n    this.removeListener(type, g);\\n\\n    if (!fired) {\\n      fired = true;\\n      listener.apply(this, arguments);\\n    }\\n  }\\n\\n  g.listener = listener;\\n  this.on(type, g);\\n\\n  return this;\\n};\\n\\n// emits a 'removeListener' event iff the listener was removed\\nEventEmitter.prototype.removeListener = function(type, listener) {\\n  var list, position, length, i;\\n\\n  if (!isFunction(listener))\\n    throw TypeError('listener must be a function');\\n\\n  if (!this._events || !this._events[type])\\n    return this;\\n\\n  list = this._events[type];\\n  length = list.length;\\n  position = -1;\\n\\n  if (list === listener ||\\n      (isFunction(list.listener) && list.listener === listener)) {\\n    delete this._events[type];\\n    if (this._events.removeListener)\\n      this.emit('removeListener', type, listener);\\n\\n  } else if (isObject(list)) {\\n    for (i = length; i-- > 0;) {\\n      if (list[i] === listener ||\\n          (list[i].listener && list[i].listener === listener)) {\\n        position = i;\\n        break;\\n      }\\n    }\\n\\n    if (position < 0)\\n      return this;\\n\\n    if (list.length === 1) {\\n      list.length = 0;\\n      delete this._events[type];\\n    } else {\\n      list.splice(position, 1);\\n    }\\n\\n    if (this._events.removeListener)\\n      this.emit('removeListener', type, listener);\\n  }\\n\\n  return this;\\n};\\n\\nEventEmitter.prototype.removeAllListeners = function(type) {\\n  var key, listeners;\\n\\n  if (!this._events)\\n    return this;\\n\\n  // not listening for removeListener, no need to emit\\n  if (!this._events.removeListener) {\\n    if (arguments.length === 0)\\n      this._events = {};\\n    else if (this._events[type])\\n      delete this._events[type];\\n    return this;\\n  }\\n\\n  // emit removeListener for all listeners on all events\\n  if (arguments.length === 0) {\\n    for (key in this._events) {\\n      if (key === 'removeListener') continue;\\n      this.removeAllListeners(key);\\n    }\\n    this.removeAllListeners('removeListener');\\n    this._events = {};\\n    return this;\\n  }\\n\\n  listeners = this._events[type];\\n\\n  if (isFunction(listeners)) {\\n    this.removeListener(type, listeners);\\n  } else if (listeners) {\\n    // LIFO order\\n    while (listeners.length)\\n      this.removeListener(type, listeners[listeners.length - 1]);\\n  }\\n  delete this._events[type];\\n\\n  return this;\\n};\\n\\nEventEmitter.prototype.listeners = function(type) {\\n  var ret;\\n  if (!this._events || !this._events[type])\\n    ret = [];\\n  else if (isFunction(this._events[type]))\\n    ret = [this._events[type]];\\n  else\\n    ret = this._events[type].slice();\\n  return ret;\\n};\\n\\nEventEmitter.prototype.listenerCount = function(type) {\\n  if (this._events) {\\n    var evlistener = this._events[type];\\n\\n    if (isFunction(evlistener))\\n      return 1;\\n    else if (evlistener)\\n      return evlistener.length;\\n  }\\n  return 0;\\n};\\n\\nEventEmitter.listenerCount = function(emitter, type) {\\n  return emitter.listenerCount(type);\\n};\\n\\nfunction isFunction(arg) {\\n  return typeof arg === 'function';\\n}\\n\\nfunction isNumber(arg) {\\n  return typeof arg === 'number';\\n}\\n\\nfunction isObject(arg) {\\n  return typeof arg === 'object' && arg !== null;\\n}\\n\\nfunction isUndefined(arg) {\\n  return arg === void 0;\\n}\\n\",\"function Postis(options) {\\n  var scope = options.scope;\\n  var targetWindow = options.window;\\n  var windowForEventListening = options.windowForEventListening || window;\\n  var listeners = {};\\n  var sendBuffer = [];\\n  var listenBuffer = {};\\n  var ready = false;\\n  var readyMethod = \\\"__ready__\\\";\\n  var readynessCheck;\\n\\n  var listener = function(event) {\\n    var data;\\n    try {\\n      data = JSON.parse(event.data);\\n    } catch (e) {\\n      return;\\n    }\\n\\n    if (data.postis && data.scope === scope) {\\n      var listenersForMethod = listeners[data.method];\\n      if (listenersForMethod) {\\n        for (var i = 0; i < listenersForMethod.length; i++) {\\n          listenersForMethod[i].call(null, data.params);\\n        }\\n      } else {\\n        listenBuffer[data.method] = listenBuffer[data.method] || [];\\n        listenBuffer[data.method].push(data.params);\\n      }\\n    }\\n  };\\n\\n  windowForEventListening.addEventListener(\\\"message\\\", listener, false);\\n\\n  var postis = {\\n    listen: function (method, callback) {\\n      listeners[method] = listeners[method] || [];\\n      listeners[method].push(callback);\\n\\n      var listenBufferForMethod = listenBuffer[method];\\n      if (listenBufferForMethod) {\\n        var listenersForMethod = listeners[method];\\n        for (var i = 0; i < listenersForMethod.length; i++) {\\n          for (var j = 0; j < listenBufferForMethod.length; j++) {\\n            listenersForMethod[i].call(null, listenBufferForMethod[j]);\\n          }\\n        }\\n      }\\n      delete listenBuffer[method];\\n    },\\n\\n    send: function (opts) {\\n      var method = opts.method;\\n\\n      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \\\"function\\\")) {\\n        targetWindow.postMessage(JSON.stringify({\\n          postis: true,\\n          scope: scope,\\n          method: method,\\n          params: opts.params\\n        }), \\\"*\\\");\\n      } else {\\n        sendBuffer.push(opts);\\n      }\\n    },\\n\\n    ready: function (callback) {\\n      if (ready) {\\n        callback();\\n      } else {\\n        setTimeout(function () { postis.ready(callback); }, 50);\\n      }\\n    },\\n\\n    destroy: function (callback) {\\n      clearInterval(readynessCheck);\\n      ready = false;\\n      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \\\"function\\\") {\\n        windowForEventListening.removeEventListener(\\\"message\\\", listener);\\n      }\\n      callback && callback();\\n    }\\n  };\\n\\n  var readyCheckID = +new Date() + Math.random() + \\\"\\\";\\n\\n  readynessCheck = setInterval(function () {\\n    postis.send({\\n      method: readyMethod,\\n      params: readyCheckID\\n    });\\n  }, 50);\\n\\n  postis.listen(readyMethod, function (id) {\\n    if (id === readyCheckID) {\\n      clearInterval(readynessCheck);\\n      ready = true;\\n\\n      for (var i = 0; i < sendBuffer.length; i++) {\\n        postis.send(sendBuffer[i]);\\n      }\\n      sendBuffer = [];\\n    } else {\\n      postis.send({\\n        method: readyMethod,\\n        params: id\\n      });\\n    }\\n  });\\n\\n  return postis;\\n}\\n\\nmodule.exports = Postis;\\n\",\"/* Copyright @ 2015-present 8x8, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\nvar Logger = require(\\\"./Logger\\\");\\nvar LogCollector = require(\\\"./LogCollector\\\");\\n\\n/**\\n * Definition of the log method\\n * @name log_method\\n * @function\\n * @param {...*} log_args the arguments to be logged\\n */\\n/**\\n * The logger's transport type definition.\\n *\\n * @typedef {object} LoggerTransport\\n *\\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\\n */\\n\\n/**\\n * Map with the created loggers with ID.\\n */\\nvar idLoggers = {};\\n\\n/**\\n * Array with the loggers without id.\\n */\\nvar loggers = [];\\n\\n/**\\n * Log level for the lbrary.\\n */\\nvar curLevel = Logger.levels.TRACE;\\n\\n\\nmodule.exports = {\\n    /**\\n     * Adds given {@link LoggerTransport} instance to the list of global\\n     * transports which means that it'll be used by all {@link Logger}s\\n     * @param {LoggerTransport} transport\\n     */\\n    addGlobalTransport: function(transport) {\\n        Logger.addGlobalTransport(transport);\\n    },\\n    /**\\n     * Removes given {@link LoggerTransport} instance from the list of global\\n     * transports\\n     * @param {LoggerTransport} transport\\n     */\\n    removeGlobalTransport: function(transport) {\\n        Logger.removeGlobalTransport(transport);\\n    },\\n    /**\\n    * Sets global options which will be used by all loggers. Changing these\\n    * works even after other loggers are created.\\n    */\\n    setGlobalOptions: function(options) {\\n        Logger.setGlobalOptions(options);\\n    },\\n    /**\\n     * Creates new logger.\\n     * @arguments the same as Logger constructor\\n     */\\n    getLogger: function(id, transports, options) {\\n        var logger = new Logger(curLevel, id, transports, options);\\n        if(id) {\\n            idLoggers[id] = idLoggers[id] || [];\\n            idLoggers[id].push(logger);\\n        } else {\\n            loggers.push(logger);\\n        }\\n        return logger;\\n    },\\n    /**\\n     * Changes the log level for the existing loggers by id.\\n     * @param level the new log level.\\n     * @param id if specified the level will be changed only for loggers with the\\n     * same id. Otherwise the operation will affect all loggers that don't\\n     * have id.\\n     */\\n    setLogLevelById: function(level, id) {\\n        var l = id? (idLoggers[id] || []) : loggers;\\n        for(var i = 0; i < l.length; i++) {\\n            l[i].setLevel(level);\\n        }\\n    },\\n    /**\\n     * Changes the log level for all existing loggers.\\n     * @param level the new log level.\\n     */\\n    setLogLevel: function (level) {\\n        curLevel = level;\\n        var i = 0;\\n        for(; i < loggers.length; i++) {\\n            loggers[i].setLevel(level);\\n        }\\n\\n        for(var id in idLoggers) {\\n            var l = idLoggers[id] || [];\\n            for(i = 0; i < l.length; i++) {\\n                l[i].setLevel(level);\\n            }\\n        }\\n    },\\n    /**\\n     * The supported log levels.\\n     */\\n    levels: Logger.levels,\\n    /**\\n     * Exports the <tt>LogCollector</tt>.\\n     */\\n    LogCollector: LogCollector\\n};\\n\",\"// For legacy purposes, preserve the UMD of the public API of Jitsi Meet\\n// external API (a.k.a. JitsiMeetExternalAPI).\\nmodule.exports = require('./external_api').default;\\n\",\"/* Copyright @ 2016-present 8x8, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\nvar Logger = require('./Logger.js');\\n\\n/**\\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\\n * and thus can be added as global transport in order to capture all the logs.\\n *\\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\\n * a message and stores them in a queue in order to batch log entries. There are\\n * time and size limit constraints which determine how often batch entries are\\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\\n * will use the <tt>logStorage</tt> object given as an argument to save\\n * the batch log entry.\\n *\\n * @param {Object} logStorage an object which allows to store the logs collected\\n * @param {function(string|object[])} logStorage.storeLogs a method called when\\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\\n * item is an object it means that it's an aggregated message. That is a message\\n * which is the same as the previous one and it's representation has\\n * the following format:\\n * {\\n *   {string} text: 'the text of some duplicated message'\\n *   {number} count: 3 // how many times the message appeared in a row\\n * }\\n * If a message \\\"B\\\" after an aggregated message \\\"A\\\" is different, then it breaks\\n * the sequence of \\\"A\\\". Which means that even if the next message \\\"C\\\" is\\n * the same as \\\"A\\\" it will start a new aggregated message \\\"C\\\".\\n * @param {function()} logStorage.isReady a method which should return\\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\\n * time storage is not ready log batches will be cached and stored on the next\\n * occasion (flush or interval timeout).\\n *\\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\\n * @param {number} options.maxEntryLength the size limit for a single log entry\\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\\n * storage becomes ready. Note that the \\\"is ready\\\" condition is checked every\\n * <tt>options.storeInterval</tt> milliseconds.\\n * @param {number} options.storeInterval how often the logs should be stored in\\n * case <tt>maxEntryLength</tt> was not exceeded.\\n * @param {boolean} options.stringifyObjects indicates whether or not object\\n * arguments should be \\\"stringified\\\" with <tt>JSON.stringify</tt> when a log\\n * message is composed. Note that objects logged on the error log level are\\n * always stringified.\\n *\\n * @constructor\\n */\\nfunction LogCollector(logStorage, options) {\\n    this.logStorage = logStorage;\\n    this.stringifyObjects\\n        = options && options.stringifyObjects\\n            ? options.stringifyObjects : false;\\n    this.storeInterval\\n        = options && options.storeInterval\\n            ? options.storeInterval: 30000;\\n    this.maxEntryLength\\n        = options && options.maxEntryLength\\n            ? options.maxEntryLength : 10000;\\n    // Bind the log method for each level to the corresponding method name\\n    // in order to implement \\\"global log transport\\\" object.\\n    Object.keys(Logger.levels).forEach(\\n    function (logLevel) {\\n        var methodName = Logger.levels[logLevel];\\n        this[methodName] = function (logLevel) {\\n            this._log.apply(this, arguments);\\n        }.bind(this, logLevel);\\n    }.bind(this));\\n    /**\\n     * The ID of store logs interval if one is currently scheduled or\\n     * <tt>null</tt> otherwise.\\n     * @type {number|null}\\n     */\\n    this.storeLogsIntervalID = null;\\n    /**\\n     * The log messages that are to be batched into log entry when\\n     * {@link LogCollector._flush} method is called.\\n     * @type {string[]}\\n     */\\n    this.queue = [];\\n    /**\\n     * The total length of all messages currently stored in the {@link queue}.\\n     * @type {number}\\n     */\\n    this.totalLen = 0;\\n    /**\\n     * An array used to temporarily store log batches, before the storage gets\\n     * ready.\\n     * @type {string[]}\\n     */\\n    this.outputCache = [];\\n}\\n\\n/**\\n * Method called inside of {@link formatLogMessage} in order to covert an\\n * <tt>Object</tt> argument to string. The conversion will happen when either\\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\\n * returns \\\"[object with circular refs?]\\\" instead of an object if it fails.\\n *\\n * @param {object} someObject the <tt>object</tt> to be stringified.\\n *\\n * @return {string} the result of <tt>JSON.stringify</tt> or\\n * \\\"[object with circular refs?]\\\" if any error occurs during \\\"stringification\\\".\\n *\\n * @protected\\n */\\nLogCollector.prototype.stringify = function (someObject) {\\n    try {\\n        return JSON.stringify(someObject);\\n    } catch (error) {\\n        return \\\"[object with circular refs?]\\\";\\n    }\\n};\\n\\n/**\\n * Formats log entry for the given logging level and arguments passed to the\\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\\n * arguments have to be captured using JS built-in 'arguments' variable.\\n *\\n * @param {Logger.levels} logLevel provides the logging level of the message to\\n * be logged.\\n *\\n * @return {string|null} a non-empty string representation of the log entry\\n * crafted from the log arguments. If the return value is <tt>null</tt> then\\n * the message wil be discarded by this <tt>LogCollector</tt>.\\n *\\n * @protected\\n */\\nLogCollector.prototype.formatLogMessage\\n= function (logLevel/*, arg1, arg2, arg3... */) {\\n    var msg = '';\\n    for (var i = 1, len = arguments.length; i < len; i++) {\\n        var arg = arguments[i];\\n        // objects logged on error level are always converted to JSON\\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\\n            && typeof arg === 'object') {\\n            arg = this.stringify(arg);\\n        }\\n        msg += arg;\\n        if (i != len - 1) {\\n            msg += ' ';\\n        }\\n    }\\n    return msg.length ? msg : null;\\n};\\n\\n/**\\n * The log method bound to each of the logging levels in order to implement\\n * \\\"global log transport\\\" object.\\n *\\n * @private\\n */\\nLogCollector.prototype._log = function() {\\n\\n    // var logLevel = arguments[0]; first argument is the log level\\n    var msg = this.formatLogMessage.apply(this, arguments);\\n    if (msg) {\\n        // The same as the previous message aggregation logic\\n        var prevMessage\\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\\n        // NOTE that typeof undefined is 'undefined'\\n        var prevMessageText\\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\\n        // Is it the same as the previous one ?\\n        if (prevMessageText == msg) {\\n            if (typeof prevMessage === 'object') {\\n                prevMessage.count += 1;\\n            } else {\\n                this.queue[this.queue.length-1] = {\\n                    text: msg,\\n                    count: 2\\n                }\\n            }\\n        } else {\\n            this.queue.push(msg);\\n            this.totalLen += msg.length;\\n        }\\n    }\\n\\n    if (this.totalLen >= this.maxEntryLength) {\\n        this._flush(true /* force */, true /* reschedule */);\\n    }\\n};\\n\\n/**\\n * Starts periodical \\\"store logs\\\" task which will be triggered at the interval\\n * specified in the constructor options.\\n */\\nLogCollector.prototype.start = function () {\\n    this._reschedulePublishInterval();\\n};\\n\\n/**\\n * Reschedules the periodical \\\"store logs\\\" task which will store the next batch\\n * log entry in the storage.\\n * @private\\n */\\nLogCollector.prototype._reschedulePublishInterval = function () {\\n    if (this.storeLogsIntervalID) {\\n        window.clearTimeout(this.storeLogsIntervalID);\\n        this.storeLogsIntervalID = null;\\n    }\\n    // It's actually a timeout, because it is rescheduled on every flush\\n    this.storeLogsIntervalID\\n        = window.setTimeout(\\n            this._flush.bind(\\n                this, false /* do not force */, true /* reschedule */),\\n            this.storeInterval);\\n};\\n\\n/**\\n * Call this method to flush the log entry buffer and store it in the log\\n * storage immediately (given that the storage is ready).\\n */\\nLogCollector.prototype.flush = function() {\\n    this._flush(\\n        false /* do not force, as it will not be stored anyway */,\\n        true /* reschedule next update */ )\\n};\\n\\n/**\\n * Stores the next batch log entry in the log storage.\\n * @param {boolean} force enforce current logs batch to be stored or cached if\\n * there is anything to be logged, but the storage is not ready yet. One of\\n * legitimate reasons to force is when the logs length exceeds size limit which\\n * could result in truncation.\\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\\n * task cycle.\\n * @private\\n */\\nLogCollector.prototype._flush = function(force, reschedule) {\\n    // Publish only if there's anything to be logged\\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\\n        //FIXME avoid truncating\\n        // right now we don't care if the message size is \\\"slightly\\\" exceeded\\n        if (this.logStorage.isReady()) {\\n            // Sends all cached logs\\n            if (this.outputCache.length) {\\n                this.outputCache.forEach(\\n                    function (cachedQueue) {\\n                        this.logStorage.storeLogs(cachedQueue);\\n                    }.bind(this)\\n                );\\n                // Clear the cache\\n                this.outputCache = [];\\n            }\\n            // Send current batch\\n            this.logStorage.storeLogs(this.queue);\\n        } else {\\n            this.outputCache.push(this.queue);\\n        }\\n\\n        this.queue = [];\\n        this.totalLen = 0;\\n    }\\n\\n    if (reschedule) {\\n        this._reschedulePublishInterval();\\n    }\\n};\\n\\n/**\\n * Stops the periodical \\\"store logs\\\" task and immediately stores any pending\\n * log entries as a batch.\\n */\\nLogCollector.prototype.stop = function() {\\n    // Flush and stop publishing logs\\n    this._flush(false /* do not force */, false /* do not reschedule */);\\n};\\n\\nmodule.exports = LogCollector;\\n\",\"// @flow\\n\\n/**\\n * The app linking scheme.\\n * TODO: This should be read from the manifest files later.\\n */\\nexport const APP_LINK_SCHEME = 'org.jitsi.meet:';\\n\\n/**\\n * A list of characters to be excluded/removed from the room component/segment\\n * of a conference/meeting URI/URL. The list is based on RFC 3986 and the jxmpp\\n * library utilized by jicofo.\\n */\\nconst _ROOM_EXCLUDE_PATTERN = '[\\\\\\\\:\\\\\\\\?#\\\\\\\\[\\\\\\\\]@!$&\\\\'()*+,;=></\\\"]';\\n\\n/**\\n * The {@link RegExp} pattern of the authority of a URI.\\n *\\n * @private\\n * @type {string}\\n */\\nconst _URI_AUTHORITY_PATTERN = '(//[^/?#]+)';\\n\\n/**\\n * The {@link RegExp} pattern of the path of a URI.\\n *\\n * @private\\n * @type {string}\\n */\\nconst _URI_PATH_PATTERN = '([^?#]*)';\\n\\n/**\\n * The {@link RegExp} pattern of the protocol of a URI.\\n *\\n * FIXME: The URL class exposed by JavaScript will not include the colon in\\n * the protocol field. Also in other places (at the time of this writing:\\n * the DeepLinkingMobilePage.js) the APP_LINK_SCHEME does not include\\n * the double dots, so things are inconsistent.\\n *\\n * @type {string}\\n */\\nexport const URI_PROTOCOL_PATTERN = '^([a-z][a-z0-9\\\\\\\\.\\\\\\\\+-]*:)';\\n\\n/**\\n * Excludes/removes certain characters from a specific room (name) which are\\n * incompatible with Jitsi Meet on the client and/or server sides.\\n *\\n * @param {?string} room - The room (name) to fix.\\n * @private\\n * @returns {?string}\\n */\\nfunction _fixRoom(room: ?string) {\\n    return room\\n        ? room.replace(new RegExp(_ROOM_EXCLUDE_PATTERN, 'g'), '')\\n        : room;\\n}\\n\\n/**\\n * Fixes the scheme part of a specific URI (string) so that it contains a\\n * well-known scheme such as HTTP(S). For example, the mobile app implements an\\n * app-specific URI scheme in addition to Universal Links. The app-specific\\n * scheme may precede or replace the well-known scheme. In such a case, dealing\\n * with the app-specific scheme only complicates the logic and it is simpler to\\n * get rid of it (by translating the app-specific scheme into a well-known\\n * scheme).\\n *\\n * @param {string} uri - The URI (string) to fix the scheme of.\\n * @private\\n * @returns {string}\\n */\\nfunction _fixURIStringScheme(uri: string) {\\n    const regex = new RegExp(`${URI_PROTOCOL_PATTERN}+`, 'gi');\\n    const match: Array<string> | null = regex.exec(uri);\\n\\n    if (match) {\\n        // As an implementation convenience, pick up the last scheme and make\\n        // sure that it is a well-known one.\\n        let protocol = match[match.length - 1].toLowerCase();\\n\\n        if (protocol !== 'http:' && protocol !== 'https:') {\\n            protocol = 'https:';\\n        }\\n\\n        /* eslint-disable no-param-reassign */\\n\\n        uri = uri.substring(regex.lastIndex);\\n        if (uri.startsWith('//')) {\\n            // The specified URL was not a room name only, it contained an\\n            // authority.\\n            uri = protocol + uri;\\n        }\\n\\n        /* eslint-enable no-param-reassign */\\n    }\\n\\n    return uri;\\n}\\n\\n/**\\n * Converts a room name to a backend-safe format. Properly lowercased and url encoded.\\n *\\n * @param {string?} room - The room name to convert.\\n * @returns {string?}\\n */\\nexport function getBackendSafeRoomName(room: ?string): ?string {\\n    if (!room) {\\n        return room;\\n    }\\n\\n    /* eslint-disable no-param-reassign */\\n    try {\\n        // We do not know if we get an already encoded string at this point\\n        // as different platforms do it differently, but we need a decoded one\\n        // for sure. However since decoding a non-encoded string is a noop, we're safe\\n        // doing it here.\\n        room = decodeURIComponent(room);\\n    } catch (e) {\\n        // This can happen though if we get an unencoded string and it contains\\n        // some characters that look like an encoded entity, but it's not.\\n        // But in this case we're fine goin on...\\n    }\\n\\n    // Normalize the character set\\n    room = room.normalize('NFKC');\\n\\n    // Only decoded and normalized strings can be lowercased properly.\\n    room = room.toLowerCase();\\n\\n    // But we still need to (re)encode it.\\n    room = encodeURIComponent(room);\\n    /* eslint-enable no-param-reassign */\\n\\n    // Unfortunately we still need to lowercase it, because encoding a string will\\n    // add some uppercase characters, but some backend services\\n    // expect it to be full lowercase. However lowercasing an encoded string\\n    // doesn't change the string value.\\n    return room.toLowerCase();\\n}\\n\\n/**\\n * Gets the (Web application) context root defined by a specific location (URI).\\n *\\n * @param {Object} location - The location (URI) which defines the (Web\\n * application) context root.\\n * @public\\n * @returns {string} - The (Web application) context root defined by the\\n * specified {@code location} (URI).\\n */\\nexport function getLocationContextRoot({ pathname }: { pathname: string }) {\\n    const contextRootEndIndex = pathname.lastIndexOf('/');\\n\\n    return (\\n        contextRootEndIndex === -1\\n            ? '/'\\n            : pathname.substring(0, contextRootEndIndex + 1));\\n}\\n\\n/**\\n * Constructs a new {@code Array} with URL parameter {@code String}s out of a\\n * specific {@code Object}.\\n *\\n * @param {Object} obj - The {@code Object} to turn into URL parameter\\n * {@code String}s.\\n * @returns {Array<string>} The {@code Array} with URL parameter {@code String}s\\n * constructed out of the specified {@code obj}.\\n */\\nfunction _objectToURLParamsArray(obj = {}) {\\n    const params = [];\\n\\n    for (const key in obj) { // eslint-disable-line guard-for-in\\n        try {\\n            params.push(\\n                `${key}=${encodeURIComponent(JSON.stringify(obj[key]))}`);\\n        } catch (e) {\\n            console.warn(`Error encoding ${key}: ${e}`);\\n        }\\n    }\\n\\n    return params;\\n}\\n\\n/**\\n * Parses a specific URI string into an object with the well-known properties of\\n * the {@link Location} and/or {@link URL} interfaces implemented by Web\\n * browsers. The parsing attempts to be in accord with IETF's RFC 3986.\\n *\\n * @param {string} str - The URI string to parse.\\n * @public\\n * @returns {{\\n *     hash: string,\\n *     host: (string|undefined),\\n *     hostname: (string|undefined),\\n *     pathname: string,\\n *     port: (string|undefined),\\n *     protocol: (string|undefined),\\n *     search: string\\n * }}\\n */\\nexport function parseStandardURIString(str: string) {\\n    /* eslint-disable no-param-reassign */\\n\\n    const obj: Object = {\\n        toString: _standardURIToString\\n    };\\n\\n    let regex;\\n    let match: Array<string> | null;\\n\\n    // XXX A URI string as defined by RFC 3986 does not contain any whitespace.\\n    // Usually, a browser will have already encoded any whitespace. In order to\\n    // avoid potential later problems related to whitespace in URI, strip any\\n    // whitespace. Anyway, the Jitsi Meet app is not known to utilize unencoded\\n    // whitespace so the stripping is deemed safe.\\n    str = str.replace(/\\\\s/g, '');\\n\\n    // protocol\\n    regex = new RegExp(URI_PROTOCOL_PATTERN, 'gi');\\n    match = regex.exec(str);\\n    if (match) {\\n        obj.protocol = match[1].toLowerCase();\\n        str = str.substring(regex.lastIndex);\\n    }\\n\\n    // authority\\n    regex = new RegExp(`^${_URI_AUTHORITY_PATTERN}`, 'gi');\\n    match = regex.exec(str);\\n    if (match) {\\n        let authority: string = match[1].substring(/* // */ 2);\\n\\n        str = str.substring(regex.lastIndex);\\n\\n        // userinfo\\n        const userinfoEndIndex = authority.indexOf('@');\\n\\n        if (userinfoEndIndex !== -1) {\\n            authority = authority.substring(userinfoEndIndex + 1);\\n        }\\n\\n        obj.host = authority;\\n\\n        // port\\n        const portBeginIndex = authority.lastIndexOf(':');\\n\\n        if (portBeginIndex !== -1) {\\n            obj.port = authority.substring(portBeginIndex + 1);\\n            authority = authority.substring(0, portBeginIndex);\\n        }\\n\\n        // hostname\\n        obj.hostname = authority;\\n    }\\n\\n    // pathname\\n    regex = new RegExp(`^${_URI_PATH_PATTERN}`, 'gi');\\n    match = regex.exec(str);\\n\\n    let pathname: ?string;\\n\\n    if (match) {\\n        pathname = match[1];\\n        str = str.substring(regex.lastIndex);\\n    }\\n    if (pathname) {\\n        pathname.startsWith('/') || (pathname = `/${pathname}`);\\n    } else {\\n        pathname = '/';\\n    }\\n    obj.pathname = pathname;\\n\\n    // query\\n    if (str.startsWith('?')) {\\n        let hashBeginIndex = str.indexOf('#', 1);\\n\\n        if (hashBeginIndex === -1) {\\n            hashBeginIndex = str.length;\\n        }\\n        obj.search = str.substring(0, hashBeginIndex);\\n        str = str.substring(hashBeginIndex);\\n    } else {\\n        obj.search = ''; // Google Chrome\\n    }\\n\\n    // fragment\\n    obj.hash = str.startsWith('#') ? str : '';\\n\\n    /* eslint-enable no-param-reassign */\\n\\n    return obj;\\n}\\n\\n/**\\n * Parses a specific URI which (supposedly) references a Jitsi Meet resource\\n * (location).\\n *\\n * @param {(string|undefined)} uri - The URI to parse which (supposedly)\\n * references a Jitsi Meet resource (location).\\n * @public\\n * @returns {{\\n *     contextRoot: string,\\n *     hash: string,\\n *     host: string,\\n *     hostname: string,\\n *     pathname: string,\\n *     port: string,\\n *     protocol: string,\\n *     room: (string|undefined),\\n *     search: string\\n * }}\\n */\\nexport function parseURIString(uri: ?string) {\\n    if (typeof uri !== 'string') {\\n        return undefined;\\n    }\\n\\n    const obj = parseStandardURIString(_fixURIStringScheme(uri));\\n\\n    // Add the properties that are specific to a Jitsi Meet resource (location)\\n    // such as contextRoot, room:\\n\\n    // contextRoot\\n    obj.contextRoot = getLocationContextRoot(obj);\\n\\n    // The room (name) is the last component/segment of pathname.\\n    const { pathname } = obj;\\n\\n    // XXX While the components/segments of pathname are URI encoded, Jitsi Meet\\n    // on the client and/or server sides still don't support certain characters.\\n    const contextRootEndIndex = pathname.lastIndexOf('/');\\n    let room = pathname.substring(contextRootEndIndex + 1) || undefined;\\n\\n    if (room) {\\n        const fixedRoom = _fixRoom(room);\\n\\n        if (fixedRoom !== room) {\\n            room = fixedRoom;\\n\\n            // XXX Drive fixedRoom into pathname (because room is derived from\\n            // pathname).\\n            obj.pathname\\n                = pathname.substring(0, contextRootEndIndex + 1) + (room || '');\\n        }\\n    }\\n    obj.room = room;\\n\\n    return obj;\\n}\\n\\n/**\\n * Implements {@code href} and {@code toString} for the {@code Object} returned\\n * by {@link #parseStandardURIString}.\\n *\\n * @param {Object} [thiz] - An {@code Object} returned by\\n * {@code #parseStandardURIString} if any; otherwise, it is presumed that the\\n * function is invoked on such an instance.\\n * @returns {string}\\n */\\nfunction _standardURIToString(thiz: ?Object) {\\n    // eslint-disable-next-line no-invalid-this\\n    const { hash, host, pathname, protocol, search } = thiz || this;\\n    let str = '';\\n\\n    protocol && (str += protocol);\\n\\n    // TODO userinfo\\n\\n    host && (str += `//${host}`);\\n    str += pathname || '/';\\n    search && (str += search);\\n    hash && (str += hash);\\n\\n    return str;\\n}\\n\\n/**\\n * Attempts to return a {@code String} representation of a specific\\n * {@code Object} which is supposed to represent a URL. Obviously, if a\\n * {@code String} is specified, it is returned. If a {@code URL} is specified,\\n * its {@code URL#href} is returned. Additionally, an {@code Object} similar to\\n * the one accepted by the constructor of Web's ExternalAPI is supported on both\\n * mobile/React Native and Web/React.\\n *\\n * @param {Object|string} obj - The URL to return a {@code String}\\n * representation of.\\n * @returns {string} - A {@code String} representation of the specified\\n * {@code obj} which is supposed to represent a URL.\\n */\\nexport function toURLString(obj: ?(Object | string)): ?string {\\n    let str;\\n\\n    switch (typeof obj) {\\n    case 'object':\\n        if (obj) {\\n            if (obj instanceof URL) {\\n                str = obj.href;\\n            } else {\\n                str = urlObjectToString(obj);\\n            }\\n        }\\n        break;\\n\\n    case 'string':\\n        str = String(obj);\\n        break;\\n    }\\n\\n    return str;\\n}\\n\\n/**\\n * Attempts to return a {@code String} representation of a specific\\n * {@code Object} similar to the one accepted by the constructor\\n * of Web's ExternalAPI.\\n *\\n * @param {Object} o - The URL to return a {@code String} representation of.\\n * @returns {string} - A {@code String} representation of the specified\\n * {@code Object}.\\n */\\nexport function urlObjectToString(o: Object): ?string {\\n    // First normalize the given url. It come as o.url or split into o.serverURL\\n    // and o.room.\\n    let tmp;\\n\\n    if (o.serverURL && o.room) {\\n        tmp = new URL(o.room, o.serverURL).toString();\\n    } else if (o.room) {\\n        tmp = o.room;\\n    } else {\\n        tmp = o.url || '';\\n    }\\n\\n    const url = parseStandardURIString(_fixURIStringScheme(tmp));\\n\\n    // protocol\\n    if (!url.protocol) {\\n        let protocol: ?string = o.protocol || o.scheme;\\n\\n        if (protocol) {\\n            // Protocol is supposed to be the scheme and the final ':'. Anyway,\\n            // do not make a fuss if the final ':' is not there.\\n            protocol.endsWith(':') || (protocol += ':');\\n            url.protocol = protocol;\\n        }\\n    }\\n\\n    // authority & pathname\\n    let { pathname } = url;\\n\\n    if (!url.host) {\\n        // Web's ExternalAPI domain\\n        //\\n        // It may be host/hostname and pathname with the latter denoting the\\n        // tenant.\\n        const domain: ?string = o.domain || o.host || o.hostname;\\n\\n        if (domain) {\\n            const { host, hostname, pathname: contextRoot, port }\\n                = parseStandardURIString(\\n\\n                    // XXX The value of domain in supposed to be host/hostname\\n                    // and, optionally, pathname. Make sure it is not taken for\\n                    // a pathname only.\\n                    _fixURIStringScheme(`${APP_LINK_SCHEME}//${domain}`));\\n\\n            // authority\\n            if (host) {\\n                url.host = host;\\n                url.hostname = hostname;\\n                url.port = port;\\n            }\\n\\n            // pathname\\n            pathname === '/' && contextRoot !== '/' && (pathname = contextRoot);\\n        }\\n    }\\n\\n    // pathname\\n\\n    // Web's ExternalAPI roomName\\n    const room = o.roomName || o.room;\\n\\n    if (room\\n            && (url.pathname.endsWith('/')\\n                || !url.pathname.endsWith(`/${room}`))) {\\n        pathname.endsWith('/') || (pathname += '/');\\n        pathname += room;\\n    }\\n\\n    url.pathname = pathname;\\n\\n    // query/search\\n\\n    // Web's ExternalAPI jwt\\n    const { jwt } = o;\\n\\n    if (jwt) {\\n        let { search } = url;\\n\\n        if (search.indexOf('?jwt=') === -1 && search.indexOf('&jwt=') === -1) {\\n            search.startsWith('?') || (search = `?${search}`);\\n            search.length === 1 || (search += '&');\\n            search += `jwt=${jwt}`;\\n\\n            url.search = search;\\n        }\\n    }\\n\\n    // fragment/hash\\n\\n    let { hash } = url;\\n\\n    for (const urlPrefix of [ 'config', 'interfaceConfig', 'devices' ]) {\\n        const urlParamsArray\\n            = _objectToURLParamsArray(\\n                o[`${urlPrefix}Overwrite`]\\n                    || o[urlPrefix]\\n                    || o[`${urlPrefix}Override`]);\\n\\n        if (urlParamsArray.length) {\\n            let urlParamsString\\n                = `${urlPrefix}.${urlParamsArray.join(`&${urlPrefix}.`)}`;\\n\\n            if (hash.length) {\\n                urlParamsString = `&${urlParamsString}`;\\n            } else {\\n                hash = '#';\\n            }\\n            hash += urlParamsString;\\n        }\\n    }\\n\\n    url.hash = hash;\\n\\n    return url.toString() || undefined;\\n}\\n\",\"// XXX The function parseURLParams is exported by the feature base/config (as\\n// defined in the terminology of react/). However, this file is (very likely)\\n// bundled in external_api in addition to app.bundle and, consequently, it is\\n// best to import as little as possible here (rather than the whole feature\\n// base/config) in order to minimize the amount of source code bundled into\\n// multiple bundles.\\nimport parseURLParams from '../../react/features/base/config/parseURLParams';\\n\\n/**\\n * JitsiMeetExternalAPI id - unique for a webpage.\\n */\\nexport const API_ID\\n    = parseURLParams(window.location).jitsi_meet_external_api_id;\\n\",\"/* @flow */\\n\\nimport { reportError } from '../util';\\n\\n/**\\n * Parses the query/search or fragment/hash parameters out of a specific URL and\\n * returns them as a JS object.\\n *\\n * @param {string} url - The URL to parse.\\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\\n * value as JSON) will be executed.\\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\\n * of {@code url.search}; otherwise, out of {@code url.hash}.\\n * @returns {Object}\\n */\\nexport default function parseURLParams(\\n        url: URL,\\n        dontParse: boolean = false,\\n        source: string = 'hash'): Object {\\n    const paramStr = source === 'search' ? url.search : url.hash;\\n    const params = {};\\n    const paramParts = (paramStr && paramStr.substr(1).split('&')) || [];\\n\\n    // Detect and ignore hash params for hash routers.\\n    if (source === 'hash' && paramParts.length === 1) {\\n        const firstParam = paramParts[0];\\n\\n        if (firstParam.startsWith('/') && firstParam.split('&').length === 1) {\\n            return params;\\n        }\\n    }\\n\\n    paramParts.forEach(part => {\\n        const param = part.split('=');\\n        const key = param[0];\\n\\n        if (!key) {\\n            return;\\n        }\\n\\n        let value;\\n\\n        try {\\n            value = param[1];\\n\\n            if (!dontParse) {\\n                const decoded = decodeURIComponent(value).replace(/\\\\\\\\&/, '&');\\n\\n                value = decoded === 'undefined' ? undefined : JSON.parse(decoded);\\n            }\\n        } catch (e) {\\n            reportError(\\n                e, `Failed to parse URL parameter value: ${String(value)}`);\\n\\n            return;\\n        }\\n        params[key] = value;\\n    });\\n\\n    return params;\\n}\\n\",\"// @flow\\n\\n/**\\n * Creates a deferred object.\\n *\\n * @returns {{promise, resolve, reject}}\\n */\\nexport function createDeferred(): Object {\\n    const deferred = {};\\n\\n    deferred.promise = new Promise((resolve, reject) => {\\n        deferred.resolve = resolve;\\n        deferred.reject = reject;\\n    });\\n\\n    return deferred;\\n}\\n\\nconst MATCH_OPERATOR_REGEXP = /[|\\\\\\\\{}()[\\\\]^$+*?.-]/g;\\n\\n/**\\n * Escape RegExp special characters.\\n *\\n * Based on https://github.com/sindresorhus/escape-string-regexp.\\n *\\n * @param {string} s - The regexp string to escape.\\n * @returns {string}\\n */\\nexport function escapeRegexp(s: string) {\\n    if (typeof s !== 'string') {\\n        throw new TypeError('Expected a string');\\n    }\\n\\n    return s.replace(MATCH_OPERATOR_REGEXP, '\\\\\\\\$&');\\n}\\n\\n/**\\n * Returns the base URL of the app.\\n *\\n * @param {Object} w - Window object to use instead of the built in one.\\n * @returns {string}\\n */\\nexport function getBaseUrl(w: Object = window) {\\n    const doc = w.document;\\n    const base = doc.querySelector('base');\\n\\n    if (base && base.href) {\\n        return base.href;\\n    }\\n\\n    const { protocol, host } = w.location;\\n\\n    return `${protocol}//${host}`;\\n}\\n\\n/**\\n * Returns the namespace for all global variables, functions, etc that we need.\\n *\\n * @returns {Object} The namespace.\\n *\\n * NOTE: After React-ifying everything this should be the only global.\\n */\\nexport function getJitsiMeetGlobalNS() {\\n    if (!window.JitsiMeetJS) {\\n        window.JitsiMeetJS = {};\\n    }\\n\\n    if (!window.JitsiMeetJS.app) {\\n        window.JitsiMeetJS.app = {};\\n    }\\n\\n    return window.JitsiMeetJS.app;\\n}\\n\\n/**\\n * A helper function that behaves similar to Object.assign, but only reassigns a\\n * property in target if it's defined in source.\\n *\\n * @param {Object} target - The target object to assign the values into.\\n * @param {Object} source - The source object.\\n * @returns {Object}\\n */\\nexport function assignIfDefined(target: Object, source: Object) {\\n    const to = Object(target);\\n\\n    for (const nextKey in source) {\\n        if (source.hasOwnProperty(nextKey)) {\\n            const value = source[nextKey];\\n\\n            if (typeof value !== 'undefined') {\\n                to[nextKey] = value;\\n            }\\n        }\\n    }\\n\\n    return to;\\n}\\n\\n/**\\n * Prints the error and reports it to the global error handler.\\n *\\n * @param {Error} e - The error object.\\n * @param {string} msg - A custom message to print in addition to the error.\\n * @returns {void}\\n */\\nexport function reportError(e: Object, msg: string = '') {\\n    console.error(msg, e);\\n    window.onerror && window.onerror(msg, null, null, null, e);\\n}\\n\",\"import Postis from 'postis';\\n\\n/**\\n * The default options for postis.\\n *\\n * @type {Object}\\n */\\nconst DEFAULT_POSTIS_OPTIONS = {\\n    window: window.opener || window.parent\\n};\\n\\n/**\\n * The list of methods of incoming postis messages that we have to support for\\n * backward compatibility for the users that are directly sending messages to\\n * Jitsi Meet (without using external_api.js)\\n *\\n * @type {string[]}\\n */\\nconst LEGACY_INCOMING_METHODS = [\\n    'avatar-url',\\n    'display-name',\\n    'email',\\n    'toggle-audio',\\n    'toggle-chat',\\n    'toggle-film-strip',\\n    'toggle-share-screen',\\n    'toggle-video',\\n    'video-hangup'\\n];\\n\\n/**\\n * The list of methods of outgoing postis messages that we have to support for\\n * backward compatibility for the users that are directly listening to the\\n * postis messages send by Jitsi Meet(without using external_api.js).\\n *\\n * @type {string[]}\\n */\\nconst LEGACY_OUTGOING_METHODS = [\\n    'display-name-change',\\n    'incoming-message',\\n    'outgoing-message',\\n    'participant-joined',\\n    'participant-left',\\n    'video-conference-joined',\\n    'video-conference-left',\\n    'video-ready-to-close'\\n];\\n\\n/**\\n * The postis method used for all messages.\\n *\\n * @type {string}\\n */\\nconst POSTIS_METHOD_NAME = 'message';\\n\\n/**\\n * Implements message transport using the postMessage API.\\n */\\nexport default class PostMessageTransportBackend {\\n    /**\\n     * Creates new PostMessageTransportBackend instance.\\n     *\\n     * @param {Object} options - Optional parameters for configuration of the\\n     * transport.\\n     */\\n    constructor({ enableLegacyFormat, postisOptions } = {}) {\\n        // eslint-disable-next-line new-cap\\n        this.postis = Postis({\\n            ...DEFAULT_POSTIS_OPTIONS,\\n            ...postisOptions\\n        });\\n\\n        /**\\n         * If true PostMessageTransportBackend will process and send messages\\n         * using the legacy format and in the same time the current format.\\n         * Otherwise all messages (outgoing and incoming) that are using the\\n         * legacy format will be ignored.\\n         *\\n         * @type {boolean}\\n         */\\n        this._enableLegacyFormat = enableLegacyFormat;\\n\\n        if (this._enableLegacyFormat) {\\n            // backward compatibility\\n            LEGACY_INCOMING_METHODS.forEach(method =>\\n                this.postis.listen(\\n                    method,\\n                    params =>\\n                        this._legacyMessageReceivedCallback(method, params)\\n                )\\n            );\\n        }\\n\\n        this._receiveCallback = () => {\\n            // Do nothing until a callback is set by the consumer of\\n            // PostMessageTransportBackend via setReceiveCallback.\\n        };\\n\\n        this.postis.listen(\\n            POSTIS_METHOD_NAME,\\n            message => this._receiveCallback(message));\\n    }\\n\\n    /**\\n     * Handles incoming legacy postis messages.\\n     *\\n     * @param {string} method - The method property from the postis message.\\n     * @param {Any} params - The params property from the postis message.\\n     * @returns {void}\\n     */\\n    _legacyMessageReceivedCallback(method, params = {}) {\\n        this._receiveCallback({\\n            data: {\\n                name: method,\\n                data: params\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Sends the passed message via postis using the old format.\\n     *\\n     * @param {Object} legacyMessage - The message to be sent.\\n     * @returns {void}\\n     */\\n    _sendLegacyMessage({ name, ...data }) {\\n        if (name && LEGACY_OUTGOING_METHODS.indexOf(name) !== -1) {\\n            this.postis.send({\\n                method: name,\\n                params: data\\n            });\\n        }\\n    }\\n\\n    /**\\n     * Disposes the allocated resources.\\n     *\\n     * @returns {void}\\n     */\\n    dispose() {\\n        this.postis.destroy();\\n    }\\n\\n    /**\\n     * Sends the passed message.\\n     *\\n     * @param {Object} message - The message to be sent.\\n     * @returns {void}\\n     */\\n    send(message) {\\n        this.postis.send({\\n            method: POSTIS_METHOD_NAME,\\n            params: message\\n        });\\n\\n        if (this._enableLegacyFormat) {\\n            // For the legacy use case we don't need any new fields defined in\\n            // Transport class. That's why we are passing only the original\\n            // object passed by the consumer of the Transport class which is\\n            // message.data.\\n            this._sendLegacyMessage(message.data || {});\\n        }\\n    }\\n\\n    /**\\n     * Sets the callback for receiving data.\\n     *\\n     * @param {Function} callback - The new callback.\\n     * @returns {void}\\n     */\\n    setReceiveCallback(callback) {\\n        this._receiveCallback = callback;\\n    }\\n}\\n\",\"/**\\n * The message type for events.\\n *\\n * @type {string}\\n */\\nexport const MESSAGE_TYPE_EVENT = 'event';\\n\\n/**\\n * The message type for requests.\\n *\\n * @type {string}\\n */\\nexport const MESSAGE_TYPE_REQUEST = 'request';\\n\\n/**\\n * The message type for responses.\\n *\\n * @type {string}\\n */\\nexport const MESSAGE_TYPE_RESPONSE = 'response';\\n\",\"import {\\n    MESSAGE_TYPE_EVENT,\\n    MESSAGE_TYPE_REQUEST,\\n    MESSAGE_TYPE_RESPONSE\\n} from './constants';\\n\\n/**\\n * Stores the currnet transport backend that have to be used. Also implements\\n * request/response mechanism.\\n */\\nexport default class Transport {\\n    /**\\n     * Creates new instance.\\n     *\\n     * @param {Object} options - Optional parameters for configuration of the\\n     * transport backend.\\n     */\\n    constructor({ backend } = {}) {\\n        /**\\n         * Maps an event name and listener that have been added to the Transport\\n         * instance.\\n         *\\n         * @type {Map<string, Function>}\\n         */\\n        this._listeners = new Map();\\n\\n        /**\\n         * The request ID counter used for the id property of the request. This\\n         * property is used to match the responses with the request.\\n         *\\n         * @type {number}\\n         */\\n        this._requestID = 0;\\n\\n        /**\\n         * Maps an IDs of the requests and handlers that will process the\\n         * responses of those requests.\\n         *\\n         * @type {Map<number, Function>}\\n         */\\n        this._responseHandlers = new Map();\\n\\n        /**\\n         * A set with the events and requests that were received but not\\n         * processed by any listener. They are later passed on every new\\n         * listener until they are processed.\\n         *\\n         * @type {Set<Object>}\\n         */\\n        this._unprocessedMessages = new Set();\\n\\n        /**\\n         * Alias.\\n         */\\n        this.addListener = this.on;\\n\\n        if (backend) {\\n            this.setBackend(backend);\\n        }\\n    }\\n\\n    /**\\n     * Disposes the current transport backend.\\n     *\\n     * @returns {void}\\n     */\\n    _disposeBackend() {\\n        if (this._backend) {\\n            this._backend.dispose();\\n            this._backend = null;\\n        }\\n    }\\n\\n    /**\\n     * Handles incoming messages from the transport backend.\\n     *\\n     * @param {Object} message - The message.\\n     * @returns {void}\\n     */\\n    _onMessageReceived(message) {\\n        if (message.type === MESSAGE_TYPE_RESPONSE) {\\n            const handler = this._responseHandlers.get(message.id);\\n\\n            if (handler) {\\n                handler(message);\\n                this._responseHandlers.delete(message.id);\\n            }\\n        } else if (message.type === MESSAGE_TYPE_REQUEST) {\\n            this.emit('request', message.data, (result, error) => {\\n                this._backend.send({\\n                    type: MESSAGE_TYPE_RESPONSE,\\n                    error,\\n                    id: message.id,\\n                    result\\n                });\\n            });\\n        } else {\\n            this.emit('event', message.data);\\n        }\\n    }\\n\\n    /**\\n     * Disposes the allocated resources.\\n     *\\n     * @returns {void}\\n     */\\n    dispose() {\\n        this._responseHandlers.clear();\\n        this._unprocessedMessages.clear();\\n        this.removeAllListeners();\\n        this._disposeBackend();\\n    }\\n\\n    /**\\n     * Calls each of the listeners registered for the event named eventName, in\\n     * the order they were registered, passing the supplied arguments to each.\\n     *\\n     * @param {string} eventName -  The name of the event.\\n     * @returns {boolean} True if the event has been processed by any listener,\\n     * false otherwise.\\n     */\\n    emit(eventName, ...args) {\\n        const listenersForEvent = this._listeners.get(eventName);\\n        let isProcessed = false;\\n\\n        if (listenersForEvent && listenersForEvent.size) {\\n            listenersForEvent.forEach(listener => {\\n                isProcessed = listener(...args) || isProcessed;\\n            });\\n        }\\n\\n        if (!isProcessed) {\\n            this._unprocessedMessages.add(args);\\n        }\\n\\n        return isProcessed;\\n    }\\n\\n    /**\\n     * Adds the listener function to the listeners collection for the event\\n     * named eventName.\\n     *\\n     * @param {string} eventName -  The name of the event.\\n     * @param {Function} listener - The listener that will be added.\\n     * @returns {Transport} References to the instance of Transport class, so\\n     * that calls can be chained.\\n     */\\n    on(eventName, listener) {\\n        let listenersForEvent = this._listeners.get(eventName);\\n\\n        if (!listenersForEvent) {\\n            listenersForEvent = new Set();\\n            this._listeners.set(eventName, listenersForEvent);\\n        }\\n\\n        listenersForEvent.add(listener);\\n\\n        this._unprocessedMessages.forEach(args => {\\n            if (listener(...args)) {\\n                this._unprocessedMessages.delete(args);\\n            }\\n        });\\n\\n        return this;\\n    }\\n\\n    /**\\n     * Removes all listeners, or those of the specified eventName.\\n     *\\n     * @param {string} [eventName] - The name of the event. If this parameter is\\n     * not specified all listeners will be removed.\\n     * @returns {Transport} References to the instance of Transport class, so\\n     * that calls can be chained.\\n     */\\n    removeAllListeners(eventName) {\\n        if (eventName) {\\n            this._listeners.delete(eventName);\\n        } else {\\n            this._listeners.clear();\\n        }\\n\\n        return this;\\n    }\\n\\n    /**\\n     * Removes the listener function from the listeners collection for the event\\n     * named eventName.\\n     *\\n     * @param {string} eventName -  The name of the event.\\n     * @param {Function} listener - The listener that will be removed.\\n     * @returns {Transport} References to the instance of Transport class, so\\n     * that calls can be chained.\\n     */\\n    removeListener(eventName, listener) {\\n        const listenersForEvent = this._listeners.get(eventName);\\n\\n        if (listenersForEvent) {\\n            listenersForEvent.delete(listener);\\n        }\\n\\n        return this;\\n    }\\n\\n    /**\\n     * Sends the passed event.\\n     *\\n     * @param {Object} event - The event to be sent.\\n     * @returns {void}\\n     */\\n    sendEvent(event = {}) {\\n        if (this._backend) {\\n            this._backend.send({\\n                type: MESSAGE_TYPE_EVENT,\\n                data: event\\n            });\\n        }\\n    }\\n\\n    /**\\n     * Sending request.\\n     *\\n     * @param {Object} request - The request to be sent.\\n     * @returns {Promise}\\n     */\\n    sendRequest(request) {\\n        if (!this._backend) {\\n            return Promise.reject(new Error('No transport backend defined!'));\\n        }\\n\\n        this._requestID++;\\n\\n        const id = this._requestID;\\n\\n        return new Promise((resolve, reject) => {\\n            this._responseHandlers.set(id, ({ error, result }) => {\\n                if (typeof result !== 'undefined') {\\n                    resolve(result);\\n\\n                // eslint-disable-next-line no-negated-condition\\n                } else if (typeof error !== 'undefined') {\\n                    reject(error);\\n                } else { // no response\\n                    reject(new Error('Unexpected response format!'));\\n                }\\n            });\\n\\n            this._backend.send({\\n                type: MESSAGE_TYPE_REQUEST,\\n                data: request,\\n                id\\n            });\\n        });\\n    }\\n\\n    /**\\n     * Changes the current backend transport.\\n     *\\n     * @param {Object} backend - The new transport backend that will be used.\\n     * @returns {void}\\n     */\\n    setBackend(backend) {\\n        this._disposeBackend();\\n\\n        this._backend = backend;\\n        this._backend.setReceiveCallback(this._onMessageReceived.bind(this));\\n    }\\n}\\n\",\"// FIXME: change to '../API' when we update to webpack2. If we do this now all\\n// files from API modules will be included in external_api.js.\\nimport { API_ID } from '../API/constants';\\nimport { getJitsiMeetGlobalNS } from '../../react/features/base/util';\\n\\nimport PostMessageTransportBackend from './PostMessageTransportBackend';\\nimport Transport from './Transport';\\n\\nexport {\\n    PostMessageTransportBackend,\\n    Transport\\n};\\n\\n/**\\n * Option for the default low level transport.\\n *\\n * @type {Object}\\n */\\nconst postisOptions = {};\\n\\nif (typeof API_ID === 'number') {\\n    postisOptions.scope = `jitsi_meet_external_api_${API_ID}`;\\n}\\n\\n/**\\n * The instance of Transport class that will be used by Jitsi Meet.\\n *\\n * @type {Transport}\\n */\\nlet transport;\\n\\n/**\\n * Returns the instance of Transport class that will be used by Jitsi Meet.\\n *\\n * @returns {Transport}\\n */\\nexport function getJitsiMeetTransport() {\\n    if (!transport) {\\n        transport = new Transport({\\n            backend: new PostMessageTransportBackend({\\n                enableLegacyFormat: true,\\n                postisOptions\\n            })\\n        });\\n    }\\n\\n    return transport;\\n}\\n\\n/**\\n * Sets the transport to passed transport.\\n *\\n * @param {Object} externalTransportBackend - The new transport.\\n * @returns {void}\\n */\\ngetJitsiMeetGlobalNS().setExternalTransportBackend = externalTransportBackend =>\\n    transport.setBackend(externalTransportBackend);\\n\",\"import EventEmitter from 'events';\\n\\nimport { urlObjectToString } from '../../../react/features/base/util/uri';\\nimport {\\n    PostMessageTransportBackend,\\n    Transport\\n} from '../../transport';\\n\\nimport electronPopupsConfig from './electronPopupsConfig.json';\\nimport {\\n    getAvailableDevices,\\n    getCurrentDevices,\\n    isDeviceChangeAvailable,\\n    isDeviceListAvailable,\\n    isMultipleAudioInputSupported,\\n    setAudioInputDevice,\\n    setAudioOutputDevice,\\n    setVideoInputDevice\\n} from './functions';\\n\\nconst ALWAYS_ON_TOP_FILENAMES = [\\n    'css/all.css', 'libs/alwaysontop.min.js'\\n];\\n\\n/**\\n * Maps the names of the commands expected by the API with the name of the\\n * commands expected by jitsi-meet\\n */\\nconst commands = {\\n    avatarUrl: 'avatar-url',\\n    displayName: 'display-name',\\n    email: 'email',\\n    hangup: 'video-hangup',\\n    password: 'password',\\n    sendTones: 'send-tones',\\n    subject: 'subject',\\n    submitFeedback: 'submit-feedback',\\n    toggleAudio: 'toggle-audio',\\n    toggleChat: 'toggle-chat',\\n    toggleFilmStrip: 'toggle-film-strip',\\n    toggleShareScreen: 'toggle-share-screen',\\n    toggleTileView: 'toggle-tile-view',\\n    toggleVideo: 'toggle-video'\\n};\\n\\n/**\\n * Maps the names of the events expected by the API with the name of the\\n * events expected by jitsi-meet\\n */\\nconst events = {\\n    'avatar-changed': 'avatarChanged',\\n    'audio-availability-changed': 'audioAvailabilityChanged',\\n    'audio-mute-status-changed': 'audioMuteStatusChanged',\\n    'camera-error': 'cameraError',\\n    'device-list-changed': 'deviceListChanged',\\n    'display-name-change': 'displayNameChange',\\n    'email-change': 'emailChange',\\n    'feedback-submitted': 'feedbackSubmitted',\\n    'feedback-prompt-displayed': 'feedbackPromptDisplayed',\\n    'filmstrip-display-changed': 'filmstripDisplayChanged',\\n    'incoming-message': 'incomingMessage',\\n    'mic-error': 'micError',\\n    'outgoing-message': 'outgoingMessage',\\n    'participant-joined': 'participantJoined',\\n    'participant-kicked-out': 'participantKickedOut',\\n    'participant-left': 'participantLeft',\\n    'password-required': 'passwordRequired',\\n    'proxy-connection-event': 'proxyConnectionEvent',\\n    'video-ready-to-close': 'readyToClose',\\n    'video-conference-joined': 'videoConferenceJoined',\\n    'video-conference-left': 'videoConferenceLeft',\\n    'video-availability-changed': 'videoAvailabilityChanged',\\n    'video-mute-status-changed': 'videoMuteStatusChanged',\\n    'screen-sharing-status-changed': 'screenSharingStatusChanged',\\n    'dominant-speaker-changed': 'dominantSpeakerChanged',\\n    'subject-change': 'subjectChange',\\n    'suspend-detected': 'suspendDetected',\\n    'tile-view-changed': 'tileViewChanged'\\n};\\n\\n/**\\n * Last id of api object\\n * @type {number}\\n */\\nlet id = 0;\\n\\n/**\\n * Adds given number to the numberOfParticipants property of given APIInstance.\\n *\\n * @param {JitsiMeetExternalAPI} APIInstance - The instance of the API.\\n * @param {int} number - The number of participants to be added to\\n * numberOfParticipants property (this parameter can be negative number if the\\n * numberOfParticipants should be decreased).\\n * @returns {void}\\n */\\nfunction changeParticipantNumber(APIInstance, number) {\\n    APIInstance._numberOfParticipants += number;\\n}\\n\\n/**\\n * Generates the URL for the iframe.\\n *\\n * @param {string} domain - The domain name of the server that hosts the\\n * conference.\\n * @param {string} [options] - Another optional parameters.\\n * @param {Object} [options.configOverwrite] - Object containing configuration\\n * options defined in config.js to be overridden.\\n * @param {Object} [options.interfaceConfigOverwrite] - Object containing\\n * configuration options defined in interface_config.js to be overridden.\\n * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\\n * authentication.\\n * @param {boolean} [options.noSSL] - If the value is true https won't be used.\\n * @param {string} [options.roomName] - The name of the room to join.\\n * @returns {string} The URL.\\n */\\nfunction generateURL(domain, options = {}) {\\n    return urlObjectToString({\\n        ...options,\\n        url:\\n            `${options.noSSL ? 'http' : 'https'}://${\\n                domain}/#jitsi_meet_external_api_id=${id}`\\n    });\\n}\\n\\n/**\\n * Parses the arguments passed to the constructor. If the old format is used\\n * the function translates the arguments to the new format.\\n *\\n * @param {Array} args - The arguments to be parsed.\\n * @returns {Object} JS object with properties.\\n */\\nfunction parseArguments(args) {\\n    if (!args.length) {\\n        return {};\\n    }\\n\\n    const firstArg = args[0];\\n\\n    switch (typeof firstArg) {\\n    case 'string': // old arguments format\\n    case undefined: {\\n        // Not sure which format but we are trying to parse the old\\n        // format because if the new format is used everything will be undefined\\n        // anyway.\\n        const [\\n            roomName,\\n            width,\\n            height,\\n            parentNode,\\n            configOverwrite,\\n            interfaceConfigOverwrite,\\n            noSSL,\\n            jwt,\\n            onload\\n        ] = args;\\n\\n        return {\\n            roomName,\\n            width,\\n            height,\\n            parentNode,\\n            configOverwrite,\\n            interfaceConfigOverwrite,\\n            noSSL,\\n            jwt,\\n            onload\\n        };\\n    }\\n    case 'object': // new arguments format\\n        return args[0];\\n    default:\\n        throw new Error('Can\\\\'t parse the arguments!');\\n    }\\n}\\n\\n/**\\n * Compute valid values for height and width. If a number is specified it's\\n * treated as pixel units. If the value is expressed in px, em, pt or\\n * percentage, it's used as is.\\n *\\n * @param {any} value - The value to be parsed.\\n * @returns {string|undefined} The parsed value that can be used for setting\\n * sizes through the style property. If invalid value is passed the method\\n * retuns undefined.\\n */\\nfunction parseSizeParam(value) {\\n    let parsedValue;\\n\\n    // This regex parses values of the form 100px, 100em, 100pt or 100%.\\n    // Values like 100 or 100px are handled outside of the regex, and\\n    // invalid values will be ignored and the minimum will be used.\\n    const re = /([0-9]*\\\\.?[0-9]+)(em|pt|px|%)$/;\\n\\n    if (typeof value === 'string' && String(value).match(re) !== null) {\\n        parsedValue = value;\\n    } else if (typeof value === 'number') {\\n        parsedValue = `${value}px`;\\n    }\\n\\n    return parsedValue;\\n}\\n\\n\\n/**\\n * The IFrame API interface class.\\n */\\nexport default class JitsiMeetExternalAPI extends EventEmitter {\\n    /**\\n     * Constructs new API instance. Creates iframe and loads Jitsi Meet in it.\\n     *\\n     * @param {string} domain - The domain name of the server that hosts the\\n     * conference.\\n     * @param {Object} [options] - Optional arguments.\\n     * @param {string} [options.roomName] - The name of the room to join.\\n     * @param {number|string} [options.width] - Width of the iframe. Check\\n     * parseSizeParam for format details.\\n     * @param {number|string} [options.height] - Height of the iframe. Check\\n     * parseSizeParam for format details.\\n     * @param {DOMElement} [options.parentNode] - The node that will contain the\\n     * iframe.\\n     * @param {Object} [options.configOverwrite] - Object containing\\n     * configuration options defined in config.js to be overridden.\\n     * @param {Object} [options.interfaceConfigOverwrite] - Object containing\\n     * configuration options defined in interface_config.js to be overridden.\\n     * @param {boolean} [options.noSSL] - If the value is true https won't be\\n     * used.\\n     * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\\n     * authentication.\\n     * @param {string} [options.onload] - The onload function that will listen\\n     * for iframe onload event.\\n     * @param {Array<Object>} [options.invitees] - Array of objects containing\\n     * information about new participants that will be invited in the call.\\n     * @param {Array<Object>} [options.devices] - Array of objects containing\\n     * information about the initial devices that will be used in the call.\\n     */\\n    constructor(domain, ...args) {\\n        super();\\n        const {\\n            roomName = '',\\n            width = '100%',\\n            height = '100%',\\n            parentNode = document.body,\\n            configOverwrite = {},\\n            interfaceConfigOverwrite = {},\\n            noSSL = false,\\n            jwt = undefined,\\n            onload = undefined,\\n            invitees,\\n            devices\\n        } = parseArguments(args);\\n\\n        this._parentNode = parentNode;\\n        this._url = generateURL(domain, {\\n            configOverwrite,\\n            interfaceConfigOverwrite,\\n            jwt,\\n            noSSL,\\n            roomName,\\n            devices\\n        });\\n        this._createIFrame(height, width, onload);\\n        this._transport = new Transport({\\n            backend: new PostMessageTransportBackend({\\n                postisOptions: {\\n                    scope: `jitsi_meet_external_api_${id}`,\\n                    window: this._frame.contentWindow\\n                }\\n            })\\n        });\\n        if (Array.isArray(invitees) && invitees.length > 0) {\\n            this.invite(invitees);\\n        }\\n        this._isLargeVideoVisible = true;\\n        this._numberOfParticipants = 0;\\n        this._participants = {};\\n        this._myUserID = undefined;\\n        this._onStageParticipant = undefined;\\n        this._setupListeners();\\n        id++;\\n    }\\n\\n    /**\\n     * Creates the iframe element.\\n     *\\n     * @param {number|string} height - The height of the iframe. Check\\n     * parseSizeParam for format details.\\n     * @param {number|string} width - The with of the iframe. Check\\n     * parseSizeParam for format details.\\n     * @param {Function} onload - The function that will listen\\n     * for onload event.\\n     * @returns {void}\\n     *\\n     * @private\\n     */\\n    _createIFrame(height, width, onload) {\\n        const frameName = `jitsiConferenceFrame${id}`;\\n\\n        this._frame = document.createElement('iframe');\\n        this._frame.allow = 'camera; microphone';\\n        this._frame.src = this._url;\\n        this._frame.name = frameName;\\n        this._frame.id = frameName;\\n        this._setSize(height, width);\\n        this._frame.setAttribute('allowFullScreen', 'true');\\n        this._frame.style.border = 0;\\n\\n        if (onload) {\\n            // waits for iframe resources to load\\n            // and fires event when it is done\\n            this._frame.onload = onload;\\n        }\\n\\n        this._frame = this._parentNode.appendChild(this._frame);\\n    }\\n\\n    /**\\n     * Returns arrays with the all resources for the always on top feature.\\n     *\\n     * @returns {Array<string>}\\n     */\\n    _getAlwaysOnTopResources() {\\n        const iframeWindow = this._frame.contentWindow;\\n        const iframeDocument = iframeWindow.document;\\n        let baseURL = '';\\n        const base = iframeDocument.querySelector('base');\\n\\n        if (base && base.href) {\\n            baseURL = base.href;\\n        } else {\\n            const { protocol, host } = iframeWindow.location;\\n\\n            baseURL = `${protocol}//${host}`;\\n        }\\n\\n        return ALWAYS_ON_TOP_FILENAMES.map(\\n            filename => (new URL(filename, baseURL)).href\\n        );\\n    }\\n\\n    /**\\n     * Returns the id of the on stage participant.\\n     *\\n     * @returns {string} - The id of the on stage participant.\\n     */\\n    _getOnStageParticipant() {\\n        return this._onStageParticipant;\\n    }\\n\\n\\n    /**\\n     * Getter for the large video element in Jitsi Meet.\\n     *\\n     * @returns {HTMLElement|undefined} - The large video.\\n     */\\n    _getLargeVideo() {\\n        const iframe = this.getIFrame();\\n\\n        if (!this._isLargeVideoVisible\\n                || !iframe\\n                || !iframe.contentWindow\\n                || !iframe.contentWindow.document) {\\n            return;\\n        }\\n\\n        return iframe.contentWindow.document.getElementById('largeVideo');\\n    }\\n\\n    /**\\n     * Getter for participant specific video element in Jitsi Meet.\\n     *\\n     * @param {string|undefined} participantId - Id of participant to return the video for.\\n     *\\n     * @returns {HTMLElement|undefined} - The requested video. Will return the local video\\n     * by default if participantId is undefined.\\n     */\\n    _getParticipantVideo(participantId) {\\n        const iframe = this.getIFrame();\\n\\n        if (!iframe\\n                || !iframe.contentWindow\\n                || !iframe.contentWindow.document) {\\n            return;\\n        }\\n\\n        if (typeof participantId === 'undefined' || participantId === this._myUserID) {\\n            return iframe.contentWindow.document.getElementById('localVideo_container');\\n        }\\n\\n        return iframe.contentWindow.document.querySelector(`#participant_${participantId} video`);\\n    }\\n\\n    /**\\n     * Sets the size of the iframe element.\\n     *\\n     * @param {number|string} height - The height of the iframe.\\n     * @param {number|string} width - The with of the iframe.\\n     * @returns {void}\\n     *\\n     * @private\\n     */\\n    _setSize(height, width) {\\n        const parsedHeight = parseSizeParam(height);\\n        const parsedWidth = parseSizeParam(width);\\n\\n        if (parsedHeight !== undefined) {\\n            this._frame.style.height = parsedHeight;\\n        }\\n\\n        if (parsedWidth !== undefined) {\\n            this._frame.style.width = parsedWidth;\\n        }\\n    }\\n\\n    /**\\n     * Setups listeners that are used internally for JitsiMeetExternalAPI.\\n     *\\n     * @returns {void}\\n     *\\n     * @private\\n     */\\n    _setupListeners() {\\n        this._transport.on('event', ({ name, ...data }) => {\\n            const userID = data.id;\\n\\n            switch (name) {\\n            case 'video-conference-joined':\\n                this._myUserID = userID;\\n                this._participants[userID] = {\\n                    avatarURL: data.avatarURL\\n                };\\n\\n            // eslint-disable-next-line no-fallthrough\\n            case 'participant-joined': {\\n                this._participants[userID] = this._participants[userID] || {};\\n                this._participants[userID].displayName = data.displayName;\\n                this._participants[userID].formattedDisplayName\\n                    = data.formattedDisplayName;\\n                changeParticipantNumber(this, 1);\\n                break;\\n            }\\n            case 'participant-left':\\n                changeParticipantNumber(this, -1);\\n                delete this._participants[userID];\\n                break;\\n            case 'display-name-change': {\\n                const user = this._participants[userID];\\n\\n                if (user) {\\n                    user.displayName = data.displayname;\\n                    user.formattedDisplayName = data.formattedDisplayName;\\n                }\\n                break;\\n            }\\n            case 'email-change': {\\n                const user = this._participants[userID];\\n\\n                if (user) {\\n                    user.email = data.email;\\n                }\\n                break;\\n            }\\n            case 'avatar-changed': {\\n                const user = this._participants[userID];\\n\\n                if (user) {\\n                    user.avatarURL = data.avatarURL;\\n                }\\n                break;\\n            }\\n            case 'on-stage-participant-changed':\\n                this._onStageParticipant = userID;\\n                this.emit('largeVideoChanged');\\n                break;\\n            case 'large-video-visibility-changed':\\n                this._isLargeVideoVisible = data.isVisible;\\n                this.emit('largeVideoChanged');\\n                break;\\n            case 'video-conference-left':\\n                changeParticipantNumber(this, -1);\\n                delete this._participants[this._myUserID];\\n                break;\\n            }\\n\\n            const eventName = events[name];\\n\\n            if (eventName) {\\n                this.emit(eventName, data);\\n\\n                return true;\\n            }\\n\\n            return false;\\n        });\\n    }\\n\\n    /**\\n     * Adds event listener to Meet Jitsi.\\n     *\\n     * @param {string} event - The name of the event.\\n     * @param {Function} listener - The listener.\\n     * @returns {void}\\n     *\\n     * @deprecated\\n     * NOTE: This method is not removed for backward comatability purposes.\\n     */\\n    addEventListener(event, listener) {\\n        this.on(event, listener);\\n    }\\n\\n    /**\\n     * Adds event listeners to Meet Jitsi.\\n     *\\n     * @param {Object} listeners - The object key should be the name of\\n     * the event and value - the listener.\\n     * Currently we support the following\\n     * events:\\n     * {@code incomingMessage} - receives event notifications about incoming\\n     * messages. The listener will receive object with the following structure:\\n     * {{\\n     *  'from': from,//JID of the user that sent the message\\n     *  'nick': nick,//the nickname of the user that sent the message\\n     *  'message': txt//the text of the message\\n     * }}\\n     * {@code outgoingMessage} - receives event notifications about outgoing\\n     * messages. The listener will receive object with the following structure:\\n     * {{\\n     *  'message': txt//the text of the message\\n     * }}\\n     * {@code displayNameChanged} - receives event notifications about display\\n     * name change. The listener will receive object with the following\\n     * structure:\\n     * {{\\n     * jid: jid,//the JID of the participant that changed his display name\\n     * displayname: displayName //the new display name\\n     * }}\\n     * {@code participantJoined} - receives event notifications about new\\n     * participant.\\n     * The listener will receive object with the following structure:\\n     * {{\\n     * jid: jid //the jid of the participant\\n     * }}\\n     * {@code participantLeft} - receives event notifications about the\\n     * participant that left the room.\\n     * The listener will receive object with the following structure:\\n     * {{\\n     * jid: jid //the jid of the participant\\n     * }}\\n     * {@code videoConferenceJoined} - receives event notifications about the\\n     * local user has successfully joined the video conference.\\n     * The listener will receive object with the following structure:\\n     * {{\\n     * roomName: room //the room name of the conference\\n     * }}\\n     * {@code videoConferenceLeft} - receives event notifications about the\\n     * local user has left the video conference.\\n     * The listener will receive object with the following structure:\\n     * {{\\n     * roomName: room //the room name of the conference\\n     * }}\\n     * {@code screenSharingStatusChanged} - receives event notifications about\\n     * turning on/off the local user screen sharing.\\n     * The listener will receive object with the following structure:\\n     * {{\\n     * on: on //whether screen sharing is on\\n     * }}\\n     * {@code dominantSpeakerChanged} - receives event notifications about\\n     * change in the dominant speaker.\\n     * The listener will receive object with the following structure:\\n     * {{\\n     * id: participantId //participantId of the new dominant speaker\\n     * }}\\n     * {@code suspendDetected} - receives event notifications about detecting suspend event in host computer.\\n     * {@code readyToClose} - all hangup operations are completed and Jitsi Meet\\n     * is ready to be disposed.\\n     * @returns {void}\\n     *\\n     * @deprecated\\n     * NOTE: This method is not removed for backward comatability purposes.\\n     */\\n    addEventListeners(listeners) {\\n        for (const event in listeners) { // eslint-disable-line guard-for-in\\n            this.addEventListener(event, listeners[event]);\\n        }\\n    }\\n\\n    /**\\n     * Removes the listeners and removes the Jitsi Meet frame.\\n     *\\n     * @returns {void}\\n     */\\n    dispose() {\\n        this.emit('_willDispose');\\n        this._transport.dispose();\\n        this.removeAllListeners();\\n        if (this._frame && this._frame.parentNode) {\\n            this._frame.parentNode.removeChild(this._frame);\\n        }\\n    }\\n\\n    /**\\n     * Executes command. The available commands are:\\n     * {@code displayName} - Sets the display name of the local participant to\\n     * the value passed in the arguments array.\\n     * {@code subject} - Sets the subject of the conference, the value passed\\n     * in the arguments array. Note: Available only for moderator.\\n     *\\n     * {@code toggleAudio} - Mutes / unmutes audio with no arguments.\\n     * {@code toggleVideo} - Mutes / unmutes video with no arguments.\\n     * {@code toggleFilmStrip} - Hides / shows the filmstrip with no arguments.\\n     *\\n     * If the command doesn't require any arguments the parameter should be set\\n     * to empty array or it may be omitted.\\n     *\\n     * @param {string} name - The name of the command.\\n     * @returns {void}\\n     */\\n    executeCommand(name, ...args) {\\n        if (!(name in commands)) {\\n            console.error('Not supported command name.');\\n\\n            return;\\n        }\\n        this._transport.sendEvent({\\n            data: args,\\n            name: commands[name]\\n        });\\n    }\\n\\n    /**\\n     * Executes commands. The available commands are:\\n     * {@code displayName} - Sets the display name of the local participant to\\n     * the value passed in the arguments array.\\n     * {@code toggleAudio} - Mutes / unmutes audio. No arguments.\\n     * {@code toggleVideo} - Mutes / unmutes video. No arguments.\\n     * {@code toggleFilmStrip} - Hides / shows the filmstrip. No arguments.\\n     * {@code toggleChat} - Hides / shows chat. No arguments.\\n     * {@code toggleShareScreen} - Starts / stops screen sharing. No arguments.\\n     *\\n     * @param {Object} commandList - The object with commands to be executed.\\n     * The keys of the object are the commands that will be executed and the\\n     * values are the arguments for the command.\\n     * @returns {void}\\n     */\\n    executeCommands(commandList) {\\n        for (const key in commandList) { // eslint-disable-line guard-for-in\\n            this.executeCommand(key, commandList[key]);\\n        }\\n    }\\n\\n    /**\\n     * Returns Promise that resolves with a list of available devices.\\n     *\\n     * @returns {Promise}\\n     */\\n    getAvailableDevices() {\\n        return getAvailableDevices(this._transport);\\n    }\\n\\n    /**\\n     * Returns Promise that resolves with current selected devices.\\n     *\\n     * @returns {Promise}\\n     */\\n    getCurrentDevices() {\\n        return getCurrentDevices(this._transport);\\n    }\\n\\n    /**\\n     * Check if the audio is available.\\n     *\\n     * @returns {Promise} - Resolves with true if the audio available, with\\n     * false if not and rejects on failure.\\n     */\\n    isAudioAvailable() {\\n        return this._transport.sendRequest({\\n            name: 'is-audio-available'\\n        });\\n    }\\n\\n    /**\\n     * Returns Promise that resolves with true if the device change is available\\n     * and with false if not.\\n     *\\n     * @param {string} [deviceType] - Values - 'output', 'input' or undefined.\\n     * Default - 'input'.\\n     * @returns {Promise}\\n     */\\n    isDeviceChangeAvailable(deviceType) {\\n        return isDeviceChangeAvailable(this._transport, deviceType);\\n    }\\n\\n    /**\\n     * Returns Promise that resolves with true if the device list is available\\n     * and with false if not.\\n     *\\n     * @returns {Promise}\\n     */\\n    isDeviceListAvailable() {\\n        return isDeviceListAvailable(this._transport);\\n    }\\n\\n    /**\\n     * Returns Promise that resolves with true if multiple audio input is supported\\n     * and with false if not.\\n     *\\n     * @returns {Promise}\\n     */\\n    isMultipleAudioInputSupported() {\\n        return isMultipleAudioInputSupported(this._transport);\\n    }\\n\\n    /**\\n     * Invite people to the call.\\n     *\\n     * @param {Array<Object>} invitees - The invitees.\\n     * @returns {Promise} - Resolves on success and rejects on failure.\\n     */\\n    invite(invitees) {\\n        if (!Array.isArray(invitees) || invitees.length === 0) {\\n            return Promise.reject(new TypeError('Invalid Argument'));\\n        }\\n\\n        return this._transport.sendRequest({\\n            name: 'invite',\\n            invitees\\n        });\\n    }\\n\\n    /**\\n     * Returns the audio mute status.\\n     *\\n     * @returns {Promise} - Resolves with the audio mute status and rejects on\\n     * failure.\\n     */\\n    isAudioMuted() {\\n        return this._transport.sendRequest({\\n            name: 'is-audio-muted'\\n        });\\n    }\\n\\n    /**\\n     * Returns the avatar URL of a participant.\\n     *\\n     * @param {string} participantId - The id of the participant.\\n     * @returns {string} The avatar URL.\\n     */\\n    getAvatarURL(participantId) {\\n        const { avatarURL } = this._participants[participantId] || {};\\n\\n        return avatarURL;\\n    }\\n\\n    /**\\n     * Returns the display name of a participant.\\n     *\\n     * @param {string} participantId - The id of the participant.\\n     * @returns {string} The display name.\\n     */\\n    getDisplayName(participantId) {\\n        const { displayName } = this._participants[participantId] || {};\\n\\n        return displayName;\\n    }\\n\\n    /**\\n     * Returns the email of a participant.\\n     *\\n     * @param {string} participantId - The id of the participant.\\n     * @returns {string} The email.\\n     */\\n    getEmail(participantId) {\\n        const { email } = this._participants[participantId] || {};\\n\\n        return email;\\n    }\\n\\n    /**\\n     * Returns the formatted display name of a participant.\\n     *\\n     * @param {string} participantId - The id of the participant.\\n     * @returns {string} The formatted display name.\\n     */\\n    _getFormattedDisplayName(participantId) {\\n        const { formattedDisplayName }\\n            = this._participants[participantId] || {};\\n\\n        return formattedDisplayName;\\n    }\\n\\n    /**\\n     * Returns the iframe that loads Jitsi Meet.\\n     *\\n     * @returns {HTMLElement} The iframe.\\n     */\\n    getIFrame() {\\n        return this._frame;\\n    }\\n\\n    /**\\n     * Returns the number of participants in the conference. The local\\n     * participant is included.\\n     *\\n     * @returns {int} The number of participants in the conference.\\n     */\\n    getNumberOfParticipants() {\\n        return this._numberOfParticipants;\\n    }\\n\\n    /**\\n     * Check if the video is available.\\n     *\\n     * @returns {Promise} - Resolves with true if the video available, with\\n     * false if not and rejects on failure.\\n     */\\n    isVideoAvailable() {\\n        return this._transport.sendRequest({\\n            name: 'is-video-available'\\n        });\\n    }\\n\\n    /**\\n     * Returns the audio mute status.\\n     *\\n     * @returns {Promise} - Resolves with the audio mute status and rejects on\\n     * failure.\\n     */\\n    isVideoMuted() {\\n        return this._transport.sendRequest({\\n            name: 'is-video-muted'\\n        });\\n    }\\n\\n    /**\\n     * Removes event listener.\\n     *\\n     * @param {string} event - The name of the event.\\n     * @returns {void}\\n     *\\n     * @deprecated\\n     * NOTE: This method is not removed for backward comatability purposes.\\n     */\\n    removeEventListener(event) {\\n        this.removeAllListeners(event);\\n    }\\n\\n    /**\\n     * Removes event listeners.\\n     *\\n     * @param {Array<string>} eventList - Array with the names of the events.\\n     * @returns {void}\\n     *\\n     * @deprecated\\n     * NOTE: This method is not removed for backward comatability purposes.\\n     */\\n    removeEventListeners(eventList) {\\n        eventList.forEach(event => this.removeEventListener(event));\\n    }\\n\\n    /**\\n     * Passes an event along to the local conference participant to establish\\n     * or update a direct peer connection. This is currently used for developing\\n     * wireless screensharing with room integration and it is advised against to\\n     * use as its api may change.\\n     *\\n     * @param {Object} event - An object with information to pass along.\\n     * @param {Object} event.data - The payload of the event.\\n     * @param {string} event.from - The jid of the sender of the event. Needed\\n     * when a reply is to be sent regarding the event.\\n     * @returns {void}\\n     */\\n    sendProxyConnectionEvent(event) {\\n        this._transport.sendEvent({\\n            data: [ event ],\\n            name: 'proxy-connection-event'\\n        });\\n    }\\n\\n    /**\\n     * Sets the audio input device to the one with the label or id that is\\n     * passed.\\n     *\\n     * @param {string} label - The label of the new device.\\n     * @param {string} deviceId - The id of the new device.\\n     * @returns {Promise}\\n     */\\n    setAudioInputDevice(label, deviceId) {\\n        return setAudioInputDevice(this._transport, label, deviceId);\\n    }\\n\\n    /**\\n     * Sets the audio output device to the one with the label or id that is\\n     * passed.\\n     *\\n     * @param {string} label - The label of the new device.\\n     * @param {string} deviceId - The id of the new device.\\n     * @returns {Promise}\\n     */\\n    setAudioOutputDevice(label, deviceId) {\\n        return setAudioOutputDevice(this._transport, label, deviceId);\\n    }\\n\\n    /**\\n     * Sets the video input device to the one with the label or id that is\\n     * passed.\\n     *\\n     * @param {string} label - The label of the new device.\\n     * @param {string} deviceId - The id of the new device.\\n     * @returns {Promise}\\n     */\\n    setVideoInputDevice(label, deviceId) {\\n        return setVideoInputDevice(this._transport, label, deviceId);\\n    }\\n\\n    /**\\n     * Returns the configuration for electron for the windows that are open\\n     * from Jitsi Meet.\\n     *\\n     * @returns {Promise<Object>}\\n     *\\n     * NOTE: For internal use only.\\n     */\\n    _getElectronPopupsConfig() {\\n        return Promise.resolve(electronPopupsConfig);\\n    }\\n}\\n\"]}","code":"!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.JitsiMeetExternalAPI=t():e.JitsiMeetExternalAPI=t()}(window,function(){return function(e){var t={};function n(s){if(t[s])return t[s].exports;var i=t[s]={i:s,l:!1,exports:{}};return e[s].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)n.d(s,i,function(t){return e[t]}.bind(null,i));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/libs/\",n(n.s=6)}([function(e,t,n){\"use strict\";(function(e){n.d(t,\"a\",function(){return r}),n.d(t,\"b\",function(){return o}),n.d(t,\"c\",function(){return a}),n.d(t,\"d\",function(){return c}),n.d(t,\"e\",function(){return l}),n.d(t,\"f\",function(){return h}),n.d(t,\"g\",function(){return u}),n.d(t,\"h\",function(){return p});var s=n(5);const i=n.n(s).a.getLogger(e);function r(e){return e.sendRequest({type:\"devices\",name:\"getAvailableDevices\"}).catch(e=>(i.error(e),{}))}function o(e){return e.sendRequest({type:\"devices\",name:\"getCurrentDevices\"}).catch(e=>(i.error(e),{}))}function a(e,t){return e.sendRequest({deviceType:t,type:\"devices\",name:\"isDeviceChangeAvailable\"})}function c(e){return e.sendRequest({type:\"devices\",name:\"isDeviceListAvailable\"})}function l(e){return e.sendRequest({type:\"devices\",name:\"isMultipleAudioInputSupported\"})}function h(e,t,n){return d(e,{id:n,kind:\"audioinput\",label:t})}function u(e,t,n){return d(e,{id:n,kind:\"audiooutput\",label:t})}function d(e,t){return e.sendRequest({type:\"devices\",name:\"setDevice\",device:t})}function p(e,t,n){return d(e,{id:n,kind:\"videoinput\",label:t})}}).call(this,\"modules/API/external/functions.js\")},function(e,t){var n={trace:0,debug:1,info:2,log:3,warn:4,error:5};o.consoleTransport=console;var s=[o.consoleTransport];o.addGlobalTransport=function(e){-1===s.indexOf(e)&&s.push(e)},o.removeGlobalTransport=function(e){var t=s.indexOf(e);-1!==t&&s.splice(t,1)};var i={};function r(){var e=arguments[0],t=arguments[1],r=Array.prototype.slice.call(arguments,2);if(!(n[t]<e.level))for(var o=!(e.options.disableCallerInfo||i.disableCallerInfo)&&function(){var e={methodName:\"\",fileLocation:\"\",line:null,column:null},t=new Error,n=t.stack?t.stack.split(\"\\n\"):[];if(!n||n.length<1)return e;var s=null;return n[3]&&(s=n[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/)),!s||s.length<=4?(0===n[2].indexOf(\"log@\")?e.methodName=n[3].substr(0,n[3].indexOf(\"@\")):e.methodName=n[2].substr(0,n[2].indexOf(\"@\")),e):(e.methodName=s[1],e.fileLocation=s[2],e.line=s[3],e.column=s[4],e)}(),a=s.concat(e.transports),c=0;c<a.length;c++){var l=a[c],h=l[t];if(h&&\"function\"==typeof h){var u=[];e.id&&u.push(\"[\"+e.id+\"]\"),o&&o.methodName.length>1&&u.push(\"<\"+o.methodName+\">: \");var d=u.concat(r);h.bind(l).apply(l,d)}}}function o(e,t,s,i){this.id=t,this.options=i||{},this.transports=s,this.transports||(this.transports=[]),this.level=n[e];for(var o=Object.keys(n),a=0;a<o.length;a++)this[o[a]]=r.bind(null,this,o[a])}o.setGlobalOptions=function(e){i=e||{}},o.prototype.setLevel=function(e){this.level=n[e]},e.exports=o,o.levels={TRACE:\"trace\",DEBUG:\"debug\",INFO:\"info\",LOG:\"log\",WARN:\"warn\",ERROR:\"error\"}},function(e,t){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function s(e){return\"function\"==typeof e}function i(e){return\"object\"==typeof e&&null!==e}function r(e){return void 0===e}e.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(e){if(\"number\"!=typeof e||e<0||isNaN(e))throw TypeError(\"n must be a positive number\");return this._maxListeners=e,this},n.prototype.emit=function(e){var t,n,o,a,c,l;if(this._events||(this._events={}),\"error\"===e&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var h=new Error('Uncaught, unspecified \"error\" event. ('+t+\")\");throw h.context=t,h}if(r(n=this._events[e]))return!1;if(s(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),n.apply(this,a)}else if(i(n))for(a=Array.prototype.slice.call(arguments,1),o=(l=n.slice()).length,c=0;c<o;c++)l[c].apply(this,a);return!0},n.prototype.addListener=function(e,t){var o;if(!s(t))throw TypeError(\"listener must be a function\");return this._events||(this._events={}),this._events.newListener&&this.emit(\"newListener\",e,s(t.listener)?t.listener:t),this._events[e]?i(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,i(this._events[e])&&!this._events[e].warned&&(o=r(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&o>0&&this._events[e].length>o&&(this._events[e].warned=!0,console.error(\"(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.\",this._events[e].length),\"function\"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(e,t){if(!s(t))throw TypeError(\"listener must be a function\");var n=!1;function i(){this.removeListener(e,i),n||(n=!0,t.apply(this,arguments))}return i.listener=t,this.on(e,i),this},n.prototype.removeListener=function(e,t){var n,r,o,a;if(!s(t))throw TypeError(\"listener must be a function\");if(!this._events||!this._events[e])return this;if(o=(n=this._events[e]).length,r=-1,n===t||s(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit(\"removeListener\",e,t);else if(i(n)){for(a=o;a-- >0;)if(n[a]===t||n[a].listener&&n[a].listener===t){r=a;break}if(r<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(r,1),this._events.removeListener&&this.emit(\"removeListener\",e,t)}return this},n.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)\"removeListener\"!==t&&this.removeAllListeners(t);return this.removeAllListeners(\"removeListener\"),this._events={},this}if(s(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},n.prototype.listeners=function(e){return this._events&&this._events[e]?s(this._events[e])?[this._events[e]]:this._events[e].slice():[]},n.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(s(t))return 1;if(t)return t.length}return 0},n.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t){e.exports=function(e){var t,n=e.scope,s=e.window,i=e.windowForEventListening||window,r={},o=[],a={},c=!1,l=function(e){var t;try{t=JSON.parse(e.data)}catch(e){return}if(t.postis&&t.scope===n){var s=r[t.method];if(s)for(var i=0;i<s.length;i++)s[i].call(null,t.params);else a[t.method]=a[t.method]||[],a[t.method].push(t.params)}};i.addEventListener(\"message\",l,!1);var h={listen:function(e,t){r[e]=r[e]||[],r[e].push(t);var n=a[e];if(n)for(var s=r[e],i=0;i<s.length;i++)for(var o=0;o<n.length;o++)s[i].call(null,n[o]);delete a[e]},send:function(e){var t=e.method;(c||\"__ready__\"===e.method)&&s&&\"function\"==typeof s.postMessage?s.postMessage(JSON.stringify({postis:!0,scope:n,method:t,params:e.params}),\"*\"):o.push(e)},ready:function(e){c?e():setTimeout(function(){h.ready(e)},50)},destroy:function(e){clearInterval(t),c=!1,i&&\"function\"==typeof i.removeEventListener&&i.removeEventListener(\"message\",l),e&&e()}},u=+new Date+Math.random()+\"\";return t=setInterval(function(){h.send({method:\"__ready__\",params:u})},50),h.listen(\"__ready__\",function(e){if(e===u){clearInterval(t),c=!0;for(var n=0;n<o.length;n++)h.send(o[n]);o=[]}else h.send({method:\"__ready__\",params:e})}),h}},function(e){e.exports={\"google-auth\":{matchPatterns:{url:\"accounts.google.com\"},target:\"electron\"},\"dropbox-auth\":{matchPatterns:{url:\"dropbox.com/oauth2/authorize\"},target:\"electron\"}}},function(e,t,n){var s=n(1),i=n(7),r={},o=[],a=s.levels.TRACE;e.exports={addGlobalTransport:function(e){s.addGlobalTransport(e)},removeGlobalTransport:function(e){s.removeGlobalTransport(e)},setGlobalOptions:function(e){s.setGlobalOptions(e)},getLogger:function(e,t,n){var i=new s(a,e,t,n);return e?(r[e]=r[e]||[],r[e].push(i)):o.push(i),i},setLogLevelById:function(e,t){for(var n=t?r[t]||[]:o,s=0;s<n.length;s++)n[s].setLevel(e)},setLogLevel:function(e){a=e;for(var t=0;t<o.length;t++)o[t].setLevel(e);for(var n in r){var s=r[n]||[];for(t=0;t<s.length;t++)s[t].setLevel(e)}},levels:s.levels,LogCollector:i}},function(e,t,n){e.exports=n(8).default},function(e,t,n){var s=n(1);function i(e,t){this.logStorage=e,this.stringifyObjects=!(!t||!t.stringifyObjects)&&t.stringifyObjects,this.storeInterval=t&&t.storeInterval?t.storeInterval:3e4,this.maxEntryLength=t&&t.maxEntryLength?t.maxEntryLength:1e4,Object.keys(s.levels).forEach(function(e){this[s.levels[e]]=function(e){this._log.apply(this,arguments)}.bind(this,e)}.bind(this)),this.storeLogsIntervalID=null,this.queue=[],this.totalLen=0,this.outputCache=[]}i.prototype.stringify=function(e){try{return JSON.stringify(e)}catch(e){return\"[object with circular refs?]\"}},i.prototype.formatLogMessage=function(e){for(var t=\"\",n=1,i=arguments.length;n<i;n++){var r=arguments[n];!this.stringifyObjects&&e!==s.levels.ERROR||\"object\"!=typeof r||(r=this.stringify(r)),t+=r,n!=i-1&&(t+=\" \")}return t.length?t:null},i.prototype._log=function(){var e=this.formatLogMessage.apply(this,arguments);if(e){var t=this.queue.length?this.queue[this.queue.length-1]:void 0;(\"object\"==typeof t?t.text:t)==e?\"object\"==typeof t?t.count+=1:this.queue[this.queue.length-1]={text:e,count:2}:(this.queue.push(e),this.totalLen+=e.length)}this.totalLen>=this.maxEntryLength&&this._flush(!0,!0)},i.prototype.start=function(){this._reschedulePublishInterval()},i.prototype._reschedulePublishInterval=function(){this.storeLogsIntervalID&&(window.clearTimeout(this.storeLogsIntervalID),this.storeLogsIntervalID=null),this.storeLogsIntervalID=window.setTimeout(this._flush.bind(this,!1,!0),this.storeInterval)},i.prototype.flush=function(){this._flush(!1,!0)},i.prototype._flush=function(e,t){this.totalLen>0&&(this.logStorage.isReady()||e)&&(this.logStorage.isReady()?(this.outputCache.length&&(this.outputCache.forEach(function(e){this.logStorage.storeLogs(e)}.bind(this)),this.outputCache=[]),this.logStorage.storeLogs(this.queue)):this.outputCache.push(this.queue),this.queue=[],this.totalLen=0),t&&this._reschedulePublishInterval()},i.prototype.stop=function(){this._flush(!1,!1)},e.exports=i},function(e,t,n){\"use strict\";n.r(t);var s=n(2),i=n.n(s);const r=\"org.jitsi.meet:\",o=\"(//[^/?#]+)\",a=\"([^?#]*)\",c=\"^([a-z][a-z0-9\\\\.\\\\+-]*:)\";function l(e){const t=new RegExp(`${c}+`,\"gi\"),n=t.exec(e);if(n){let s=n[n.length-1].toLowerCase();\"http:\"!==s&&\"https:\"!==s&&(s=\"https:\"),(e=e.substring(t.lastIndex)).startsWith(\"//\")&&(e=s+e)}return e}function h(e={}){const t=[];for(const n in e)try{t.push(`${n}=${encodeURIComponent(JSON.stringify(e[n]))}`)}catch(e){console.warn(`Error encoding ${n}: ${e}`)}return t}function u(e){const t={toString:d};let n,s,i;if(e=e.replace(/\\s/g,\"\"),(s=(n=new RegExp(c,\"gi\")).exec(e))&&(t.protocol=s[1].toLowerCase(),e=e.substring(n.lastIndex)),s=(n=new RegExp(`^${o}`,\"gi\")).exec(e)){let i=s[1].substring(2);e=e.substring(n.lastIndex);const r=i.indexOf(\"@\");-1!==r&&(i=i.substring(r+1)),t.host=i;const o=i.lastIndexOf(\":\");-1!==o&&(t.port=i.substring(o+1),i=i.substring(0,o)),t.hostname=i}if((s=(n=new RegExp(`^${a}`,\"gi\")).exec(e))&&(i=s[1],e=e.substring(n.lastIndex)),i?i.startsWith(\"/\")||(i=`/${i}`):i=\"/\",t.pathname=i,e.startsWith(\"?\")){let n=e.indexOf(\"#\",1);-1===n&&(n=e.length),t.search=e.substring(0,n),e=e.substring(n)}else t.search=\"\";return t.hash=e.startsWith(\"#\")?e:\"\",t}function d(e){const{hash:t,host:n,pathname:s,protocol:i,search:r}=e||this;let o=\"\";return i&&(o+=i),n&&(o+=`//${n}`),o+=s||\"/\",r&&(o+=r),t&&(o+=t),o}function p(e){let t;const n=u(l(t=e.serverURL&&e.room?new URL(e.room,e.serverURL).toString():e.room?e.room:e.url||\"\"));if(!n.protocol){let t=e.protocol||e.scheme;t&&(t.endsWith(\":\")||(t+=\":\"),n.protocol=t)}let{pathname:s}=n;if(!n.host){const t=e.domain||e.host||e.hostname;if(t){const{host:e,hostname:i,pathname:o,port:a}=u(l(`${r}//${t}`));e&&(n.host=e,n.hostname=i,n.port=a),\"/\"===s&&\"/\"!==o&&(s=o)}}const i=e.roomName||e.room;!i||!n.pathname.endsWith(\"/\")&&n.pathname.endsWith(`/${i}`)||(s.endsWith(\"/\")||(s+=\"/\"),s+=i),n.pathname=s;const{jwt:o}=e;if(o){let{search:e}=n;-1===e.indexOf(\"?jwt=\")&&-1===e.indexOf(\"&jwt=\")&&(e.startsWith(\"?\")||(e=`?${e}`),1===e.length||(e+=\"&\"),e+=`jwt=${o}`,n.search=e)}let{hash:a}=n;for(const t of[\"config\",\"interfaceConfig\",\"devices\"]){const n=h(e[`${t}Overwrite`]||e[t]||e[`${t}Override`]);if(n.length){let e=`${t}.${n.join(`&${t}.`)}`;a.length?e=`&${e}`:a=\"#\",a+=e}}return n.hash=a,n.toString()||void 0}const f=function(e,t=!1,n=\"hash\"){const s=\"search\"===n?e.search:e.hash,i={},r=s&&s.substr(1).split(\"&\")||[];if(\"hash\"===n&&1===r.length){const e=r[0];if(e.startsWith(\"/\")&&1===e.split(\"&\").length)return i}return r.forEach(e=>{const n=e.split(\"=\"),s=n[0];if(!s)return;let r;try{if(r=n[1],!t){const e=decodeURIComponent(r).replace(/\\\\&/,\"&\");r=\"undefined\"===e?void 0:JSON.parse(e)}}catch(e){return void function(e,t=\"\"){console.error(t,e),window.onerror&&window.onerror(t,null,null,null,e)}(e,`Failed to parse URL parameter value: ${String(r)}`)}i[s]=r}),i}(window.location).jitsi_meet_external_api_id;var m=n(3),g=n.n(m);function v(e,t){if(null==e)return{};var n,s,i=function(e,t){if(null==e)return{};var n,s,i={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const b={window:window.opener||window.parent},y=[\"avatar-url\",\"display-name\",\"email\",\"toggle-audio\",\"toggle-chat\",\"toggle-film-strip\",\"toggle-share-screen\",\"toggle-video\",\"video-hangup\"],w=[\"display-name-change\",\"incoming-message\",\"outgoing-message\",\"participant-joined\",\"participant-left\",\"video-conference-joined\",\"video-conference-left\",\"video-ready-to-close\"],L=\"message\";class O{constructor({enableLegacyFormat:e,postisOptions:t}={}){this.postis=g()(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},s=Object.keys(n);\"function\"==typeof Object.getOwnPropertySymbols&&(s=s.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),s.forEach(function(t){_(e,t,n[t])})}return e}({},b,t)),this._enableLegacyFormat=e,this._enableLegacyFormat&&y.forEach(e=>this.postis.listen(e,t=>this._legacyMessageReceivedCallback(e,t))),this._receiveCallback=(()=>{}),this.postis.listen(L,e=>this._receiveCallback(e))}_legacyMessageReceivedCallback(e,t={}){this._receiveCallback({data:{name:e,data:t}})}_sendLegacyMessage(e){let{name:t}=e,n=v(e,[\"name\"]);t&&-1!==w.indexOf(t)&&this.postis.send({method:t,params:n})}dispose(){this.postis.destroy()}send(e){this.postis.send({method:L,params:e}),this._enableLegacyFormat&&this._sendLegacyMessage(e.data||{})}setReceiveCallback(e){this._receiveCallback=e}}const x=\"event\",j=\"request\",E=\"response\";class S{constructor({backend:e}={}){this._listeners=new Map,this._requestID=0,this._responseHandlers=new Map,this._unprocessedMessages=new Set,this.addListener=this.on,e&&this.setBackend(e)}_disposeBackend(){this._backend&&(this._backend.dispose(),this._backend=null)}_onMessageReceived(e){if(e.type===E){const t=this._responseHandlers.get(e.id);t&&(t(e),this._responseHandlers.delete(e.id))}else e.type===j?this.emit(\"request\",e.data,(t,n)=>{this._backend.send({type:E,error:n,id:e.id,result:t})}):this.emit(\"event\",e.data)}dispose(){this._responseHandlers.clear(),this._unprocessedMessages.clear(),this.removeAllListeners(),this._disposeBackend()}emit(e,...t){const n=this._listeners.get(e);let s=!1;return n&&n.size&&n.forEach(e=>{s=e(...t)||s}),s||this._unprocessedMessages.add(t),s}on(e,t){let n=this._listeners.get(e);return n||(n=new Set,this._listeners.set(e,n)),n.add(t),this._unprocessedMessages.forEach(e=>{t(...e)&&this._unprocessedMessages.delete(e)}),this}removeAllListeners(e){return e?this._listeners.delete(e):this._listeners.clear(),this}removeListener(e,t){const n=this._listeners.get(e);return n&&n.delete(t),this}sendEvent(e={}){this._backend&&this._backend.send({type:x,data:e})}sendRequest(e){if(!this._backend)return Promise.reject(new Error(\"No transport backend defined!\"));this._requestID++;const t=this._requestID;return new Promise((n,s)=>{this._responseHandlers.set(t,({error:e,result:t})=>{void 0!==t?n(t):s(void 0!==e?e:new Error(\"Unexpected response format!\"))}),this._backend.send({type:j,data:e,id:t})})}setBackend(e){this._disposeBackend(),this._backend=e,this._backend.setReceiveCallback(this._onMessageReceived.bind(this))}}const k={};let C;\"number\"==typeof f&&(k.scope=`jitsi_meet_external_api_${f}`),(window.JitsiMeetJS||(window.JitsiMeetJS={}),window.JitsiMeetJS.app||(window.JitsiMeetJS.app={}),window.JitsiMeetJS.app).setExternalTransportBackend=(e=>C.setBackend(e));var I=n(4),R=n(0);function A(e,t){if(null==e)return{};var n,s,i=function(e,t){if(null==e)return{};var n,s,i={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function M(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,\"default\",function(){return W});const N=[\"css/all.css\",\"libs/alwaysontop.min.js\"],P={avatarUrl:\"avatar-url\",displayName:\"display-name\",email:\"email\",hangup:\"video-hangup\",password:\"password\",sendTones:\"send-tones\",subject:\"subject\",submitFeedback:\"submit-feedback\",toggleAudio:\"toggle-audio\",toggleChat:\"toggle-chat\",toggleFilmStrip:\"toggle-film-strip\",toggleShareScreen:\"toggle-share-screen\",toggleTileView:\"toggle-tile-view\",toggleVideo:\"toggle-video\"},D={\"avatar-changed\":\"avatarChanged\",\"audio-availability-changed\":\"audioAvailabilityChanged\",\"audio-mute-status-changed\":\"audioMuteStatusChanged\",\"camera-error\":\"cameraError\",\"device-list-changed\":\"deviceListChanged\",\"display-name-change\":\"displayNameChange\",\"email-change\":\"emailChange\",\"feedback-submitted\":\"feedbackSubmitted\",\"feedback-prompt-displayed\":\"feedbackPromptDisplayed\",\"filmstrip-display-changed\":\"filmstripDisplayChanged\",\"incoming-message\":\"incomingMessage\",\"mic-error\":\"micError\",\"outgoing-message\":\"outgoingMessage\",\"participant-joined\":\"participantJoined\",\"participant-kicked-out\":\"participantKickedOut\",\"participant-left\":\"participantLeft\",\"password-required\":\"passwordRequired\",\"proxy-connection-event\":\"proxyConnectionEvent\",\"video-ready-to-close\":\"readyToClose\",\"video-conference-joined\":\"videoConferenceJoined\",\"video-conference-left\":\"videoConferenceLeft\",\"video-availability-changed\":\"videoAvailabilityChanged\",\"video-mute-status-changed\":\"videoMuteStatusChanged\",\"screen-sharing-status-changed\":\"screenSharingStatusChanged\",\"dominant-speaker-changed\":\"dominantSpeakerChanged\",\"subject-change\":\"subjectChange\",\"suspend-detected\":\"suspendDetected\",\"tile-view-changed\":\"tileViewChanged\"};let $=0;function q(e,t){e._numberOfParticipants+=t}function T(e,t={}){return p(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},s=Object.keys(n);\"function\"==typeof Object.getOwnPropertySymbols&&(s=s.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),s.forEach(function(t){M(e,t,n[t])})}return e}({},t,{url:`${t.noSSL?\"http\":\"https\"}://${e}/#jitsi_meet_external_api_id=${$}`}))}function U(e){let t;return\"string\"==typeof e&&null!==String(e).match(/([0-9]*\\.?[0-9]+)(em|pt|px|%)$/)?t=e:\"number\"==typeof e&&(t=`${e}px`),t}class W extends i.a{constructor(e,...t){super();const{roomName:n=\"\",width:s=\"100%\",height:i=\"100%\",parentNode:r=document.body,configOverwrite:o={},interfaceConfigOverwrite:a={},noSSL:c=!1,jwt:l,onload:h,invitees:u,devices:d}=function(e){if(!e.length)return{};switch(typeof e[0]){case\"string\":case void 0:{const[t,n,s,i,r,o,a,c,l]=e;return{roomName:t,width:n,height:s,parentNode:i,configOverwrite:r,interfaceConfigOverwrite:o,noSSL:a,jwt:c,onload:l}}case\"object\":return e[0];default:throw new Error(\"Can't parse the arguments!\")}}(t);this._parentNode=r,this._url=T(e,{configOverwrite:o,interfaceConfigOverwrite:a,jwt:l,noSSL:c,roomName:n,devices:d}),this._createIFrame(i,s,h),this._transport=new S({backend:new O({postisOptions:{scope:`jitsi_meet_external_api_${$}`,window:this._frame.contentWindow}})}),Array.isArray(u)&&u.length>0&&this.invite(u),this._isLargeVideoVisible=!0,this._numberOfParticipants=0,this._participants={},this._myUserID=void 0,this._onStageParticipant=void 0,this._setupListeners(),$++}_createIFrame(e,t,n){const s=`jitsiConferenceFrame${$}`;this._frame=document.createElement(\"iframe\"),this._frame.allow=\"camera; microphone\",this._frame.src=this._url,this._frame.name=s,this._frame.id=s,this._setSize(e,t),this._frame.setAttribute(\"allowFullScreen\",\"true\"),this._frame.style.border=0,n&&(this._frame.onload=n),this._frame=this._parentNode.appendChild(this._frame)}_getAlwaysOnTopResources(){const e=this._frame.contentWindow,t=e.document;let n=\"\";const s=t.querySelector(\"base\");if(s&&s.href)n=s.href;else{const{protocol:t,host:s}=e.location;n=`${t}//${s}`}return N.map(e=>new URL(e,n).href)}_getOnStageParticipant(){return this._onStageParticipant}_getLargeVideo(){const e=this.getIFrame();if(this._isLargeVideoVisible&&e&&e.contentWindow&&e.contentWindow.document)return e.contentWindow.document.getElementById(\"largeVideo\")}_getParticipantVideo(e){const t=this.getIFrame();if(t&&t.contentWindow&&t.contentWindow.document)return void 0===e||e===this._myUserID?t.contentWindow.document.getElementById(\"localVideo_container\"):t.contentWindow.document.querySelector(`#participant_${e} video`)}_setSize(e,t){const n=U(e),s=U(t);void 0!==n&&(this._frame.style.height=n),void 0!==s&&(this._frame.style.width=s)}_setupListeners(){this._transport.on(\"event\",e=>{let{name:t}=e,n=A(e,[\"name\"]);const s=n.id;switch(t){case\"video-conference-joined\":this._myUserID=s,this._participants[s]={avatarURL:n.avatarURL};case\"participant-joined\":this._participants[s]=this._participants[s]||{},this._participants[s].displayName=n.displayName,this._participants[s].formattedDisplayName=n.formattedDisplayName,q(this,1);break;case\"participant-left\":q(this,-1),delete this._participants[s];break;case\"display-name-change\":{const e=this._participants[s];e&&(e.displayName=n.displayname,e.formattedDisplayName=n.formattedDisplayName);break}case\"email-change\":{const e=this._participants[s];e&&(e.email=n.email);break}case\"avatar-changed\":{const e=this._participants[s];e&&(e.avatarURL=n.avatarURL);break}case\"on-stage-participant-changed\":this._onStageParticipant=s,this.emit(\"largeVideoChanged\");break;case\"large-video-visibility-changed\":this._isLargeVideoVisible=n.isVisible,this.emit(\"largeVideoChanged\");break;case\"video-conference-left\":q(this,-1),delete this._participants[this._myUserID]}const i=D[t];return!!i&&(this.emit(i,n),!0)})}addEventListener(e,t){this.on(e,t)}addEventListeners(e){for(const t in e)this.addEventListener(t,e[t])}dispose(){this.emit(\"_willDispose\"),this._transport.dispose(),this.removeAllListeners(),this._frame&&this._frame.parentNode&&this._frame.parentNode.removeChild(this._frame)}executeCommand(e,...t){e in P?this._transport.sendEvent({data:t,name:P[e]}):console.error(\"Not supported command name.\")}executeCommands(e){for(const t in e)this.executeCommand(t,e[t])}getAvailableDevices(){return Object(R.a)(this._transport)}getCurrentDevices(){return Object(R.b)(this._transport)}isAudioAvailable(){return this._transport.sendRequest({name:\"is-audio-available\"})}isDeviceChangeAvailable(e){return Object(R.c)(this._transport,e)}isDeviceListAvailable(){return Object(R.d)(this._transport)}isMultipleAudioInputSupported(){return Object(R.e)(this._transport)}invite(e){return Array.isArray(e)&&0!==e.length?this._transport.sendRequest({name:\"invite\",invitees:e}):Promise.reject(new TypeError(\"Invalid Argument\"))}isAudioMuted(){return this._transport.sendRequest({name:\"is-audio-muted\"})}getAvatarURL(e){const{avatarURL:t}=this._participants[e]||{};return t}getDisplayName(e){const{displayName:t}=this._participants[e]||{};return t}getEmail(e){const{email:t}=this._participants[e]||{};return t}_getFormattedDisplayName(e){const{formattedDisplayName:t}=this._participants[e]||{};return t}getIFrame(){return this._frame}getNumberOfParticipants(){return this._numberOfParticipants}isVideoAvailable(){return this._transport.sendRequest({name:\"is-video-available\"})}isVideoMuted(){return this._transport.sendRequest({name:\"is-video-muted\"})}removeEventListener(e){this.removeAllListeners(e)}removeEventListeners(e){e.forEach(e=>this.removeEventListener(e))}sendProxyConnectionEvent(e){this._transport.sendEvent({data:[e],name:\"proxy-connection-event\"})}setAudioInputDevice(e,t){return Object(R.f)(this._transport,e,t)}setAudioOutputDevice(e,t){return Object(R.g)(this._transport,e,t)}setVideoInputDevice(e,t){return Object(R.h)(this._transport,e,t)}_getElectronPopupsConfig(){return Promise.resolve(I)}}}])});","extractedComments":[]}